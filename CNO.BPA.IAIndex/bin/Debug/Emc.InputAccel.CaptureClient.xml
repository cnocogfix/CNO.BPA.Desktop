<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emc.InputAccel.CaptureClient</name>
    </assembly>
    <members>
        <member name="T:Emc.InputAccel.CaptureClient.AuthenticationPlugin">
            <summary>
            The base class for custom, external authentication plug-in for the 
            Captiva REST service. 
            </summary>
            <remarks>
                <para>Custom authentication is typically used if the remote-user 
                credentials are authenticated by a non-Windows system such as CAS. 
                The implementation must process the credentials, if any, and 
                the extra authentication info and return the appropriate Captiva 
                Capture user and roles. The roles are then used by the REST 
                service for authentication with the Captiva Capture server.</para>
            </remarks>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.AuthenticationPlugin.Roles">
            <summary>
            Key name for roles
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.AuthenticationPlugin.Departments">
            <summary>
            Key name for departments
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.AuthenticationPlugin.UserName">
            <summary>
            Key name for username
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.AuthenticationPlugin.CustomParameter">
            <summary>
            Gets or sets a custom value used by the plug-in.
            </summary>
            <remarks>
                <para>The value is initialized to the custom parameter defined as 
                part of the Captiva REST Service configuration, if any. For example,
                if CAS is used as the authentication server, this string may 
                contain the CAS server.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.AuthenticationPlugin.AuthenticateAndMapToInputAccelRole(System.String,System.Char[],System.Char[])">
            <summary>
            This signature is kept for backward compatibility reason and will be removed in future release.
            Authenticates a user and maps the user to one or more Captiva Capture roles.
            </summary>
            <param name="userName">The user name or an empty string if none was supplied.</param>
            <param name="password">The clear text password as an array or an empty array if none 
            was supplied.</param>
            <param name="extraInfo">Any additional authentication information, such as 
            a ticket from an external authentication server such as CAS, or an empty 
            string if none was supplied.</param>
            <returns>An array of Captiva role names for the user. Role "Administrators" indicates that user is application admin user.</returns>
            <remarks>
                <para>This method must be implemented by custom plug-ins.</para>
                <para>If the authentication fails for the specified user, 
                the method must throw an exception.</para>
                <para>The <paramref name="userName"/>, <paramref name="password"/>, and 
                <paramref name="extraInfo"/> are the values passed as clear text in the JSON body 
                of the <c>POST /session</c> login request. The <paramref name="password"/> is 
                cleared after the method is complete. Plug-in authors may also explicitly
                clear the <paramref name="password"/> and <paramref name="extraInfo"/> values.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.AuthenticationPlugin.AuthenticateAndMapToInputAccelUserInfo(System.String,System.Char[],System.Char[])">
            <summary>
            Authenticates a user and maps the user to one or more user Captiva Capture roles and Captiva department list.
            </summary>
            <param name="userName">The user name or an empty string if none was supplied.</param>
            <param name="password">The clear text password as an array or an empty array if none 
            was supplied.</param>
            <param name="extraInfo">Any additional authentication information, such as 
            a ticket from an external authentication server such as CAS, or an empty 
            string if none was supplied.</param>
            <returns>A dictionary of key/value pairs as follows:
            Key = AuthenticationPlugin.Roles, value must be an array of string. 
               The value represents Captiva role names for the user. Role "Administrators" indicates that user is application admin user.
            Key = AuthenticationPlugin.Departments, value must be an array of string.
               The data represents Captiva department names the user is associated with.
            Key = AuthenticationPlugin.UserName, value must be an array of string with the data in the first element.
                The value represents the username for this user.
            </returns>
            <remarks>
                <para>This method must be implemented by custom plug-ins.</para>
                <para>If the authentication fails for the specified user, 
                the method must throw an exception.</para>
                <para>The <paramref name="userName"/>, <paramref name="password"/>, and 
                <paramref name="extraInfo"/> are the values passed as clear text in the JSON body 
                of the <c>POST /session</c> login request. The <paramref name="password"/> is 
                cleared after the method is complete. Plug-in authors may also explicitly
                clear the <paramref name="password"/> and <paramref name="extraInfo"/> values.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ClientModuleFactory">
            <summary>
            If a .Net assembly provides one or more client modules then the assembly
            must have a public class that extends this class. The public class
            must also have a default constructor. The first such class is used to 
            create Client modules and task dispatcher uses the client modules to 
            dispatch tasks. A given client must provide only one MultiModuleInfo object.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleFactory.Create(System.String[])">
            <summary>
            Returns an array of all client modules implemented in this assembly.
            </summary>
            <param name="departments">Departments configured for this module.</param>
            <returns>An array of <code>ClientModuleInfo</code> object that pertain to the objects created.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ClientModuleKind">
            <summary>
            Client module type enumeration
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ClientModuleKind.Attended">
            <summary>
            Requires user to drive the UI. Task completion is explicit UI action. Only
            one task may be sent at a given time.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ClientModuleKind.Unattended">
            <summary>
            Background task. May execute multiple tasks on parallel threads.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ClientModuleUIKind">
            <summary>
            Client module UI type enumeration.
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ClientModuleUIKind.WinForm">
            <summary>
            Client module UI based on Windows Forms
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ClientModuleUIKind.Wpf">
            <summary>
            Client module UI based on Windows Presentation Foundation (WPF).
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ClientModuleInfo">
            <summary>
            This value object represents a client module that can accept tasks. Each instance
            represents one client channel. When a task is submitted to a client channel,
            the next task is not submitted until client processes this task and marks
            it as complete. 
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.#ctor(System.Int32,System.String,System.String,Emc.InputAccel.CaptureClient.ClientModuleKind,Emc.InputAccel.CaptureClient.ClientModuleUIKind,System.String[],System.Int32,System.Int32,System.Int32,Emc.InputAccel.CaptureClient.IClientModule,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of the ClientModuleInfo object.
            </summary>
            <param name="moduleId">Module ID value.</param>
            <param name="moduleType">Module type name.</param>
            <param name="moduleTitle">Module title</param>
            <param name="kind">Module kind</param>
            <param name="uiKind">Module UI kind.</param>
            <param name="departments">A list of departments to be used for this ClientModuleInfo object.</param>
            <param name="maxTasks">Number of tasks that may be dispatched in parallel</param>
            <param name="minTaskLevel">Minimum task level</param>
            <param name="maxTaskLevel">Maximum task level. If -1 then there is no upper bound.</param>
            <param name="client">Client module interface.</param>
            <param name="batchContext">If true then this client processes tasks at
            batch level. If false it processes tasks at task level. All flow-tokens are
            always generated at task level.</param>
            <param name="requiresAccessToCompleteBatch">Attended module requires 
            access to complete batch although it works in the context of a task node
            that is not at root level.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.#ctor(System.Int32,System.String,System.String,Emc.InputAccel.CaptureClient.ClientModuleKind,Emc.InputAccel.CaptureClient.ClientModuleUIKind,System.String[],System.Int32,System.Int32,System.Int32,Emc.InputAccel.CaptureClient.IClientModule,System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Creates an instance of the ClientModuleInfo object.
            </summary>
            <param name="moduleId">Module ID value.</param>
            <param name="moduleType">Module type name.</param>
            <param name="moduleTitle">Module title</param>
            <param name="kind">Module kind</param>
            <param name="uiKind">Module UI kind.</param>
            <param name="departments">A list of departments to be used for this ClientModuleInfo object.</param>
            <param name="maxTasks">Number of tasks that may be dispatched in parallel</param>
            <param name="minTaskLevel">Minimum task level</param>
            <param name="maxTaskLevel">Maximum task level. If -1 then there is no upper bound.</param>
            <param name="client">Client module interface.</param>
            <param name="batchContext">If true then this client processes tasks at
            batch level. If false it processes tasks at task level. All flow-tokens are
            always generated at task level.</param>
            <param name="requiresAccessToCompleteBatch">Attended module requires 
            access to complete batch although it works in the context of a task node
            that is not at root level.</param>
            <param name="uimClient">The module uses UimData to store document or page level data
            that is based on UIM data block.</param>
            <param name="setupValueNames">Module setup value names. This list may empty or null.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.#ctor(System.Int32,System.String,System.String,Emc.InputAccel.CaptureClient.ClientModuleKind,Emc.InputAccel.CaptureClient.ClientModuleUIKind,System.String[],System.Int32,System.Int32,System.Int32,Emc.InputAccel.CaptureClient.IClientModule,System.Boolean,System.Boolean,System.Boolean,System.String[],System.String,System.String[],System.String[])">
            <summary>
            Creates an instance of the ClientModuleInfo object.
            </summary>
            <param name="moduleId">Module ID value.</param>
            <param name="moduleType">Module type name.</param>
            <param name="moduleTitle">Module title</param>
            <param name="kind">Module kind</param>
            <param name="uiKind">Module UI kind.</param>
            <param name="departments">A list of departments to be used for this ClientModuleInfo object.</param>
            <param name="maxTasks">Number of tasks that may be dispatched in parallel</param>
            <param name="minTaskLevel">Minimum task level</param>
            <param name="maxTaskLevel">Maximum task level. If -1 then there is no upper bound.</param>
            <param name="client">Client module interface.</param>
            <param name="batchContext">If true then this client processes tasks at
            batch level. If false it processes tasks at task level. All flow-tokens are
            always generated at task level.</param>
            <param name="requiresAccessToCompleteBatch">Attended module requires 
            access to complete batch although it works in the context of a task node
            that is not at root level.</param>
            <param name="uimClient">The module uses UimData to store document or page level data
            that is based on UIM data block.</param>
            <param name="setupValueNames">Module setup value names. This list may empty or null.</param>
            <param name="moduleDescription">Module description.</param>
            <param name="levelZeroPrefetchValueNames">Level 0 prefetch value names. This list
            may be null or empty.</param>
            <param name="levelOnePrefetchValueNames">Level 1 prefetch value names. This list
            may be null or empty.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.#ctor(System.Int32,System.String,System.String,Emc.InputAccel.CaptureClient.ClientModuleKind,Emc.InputAccel.CaptureClient.ClientModuleUIKind,System.String[],System.Int32,System.Int32,System.Int32,Emc.InputAccel.CaptureClient.IClientModule,System.Boolean,System.Boolean,System.Boolean,System.String[],System.String[])">
            <summary>
            Creates an instance of the ClientModuleInfo object.
            </summary>
            <param name="moduleId">Module ID value.</param>
            <param name="moduleType">Module type name.</param>
            <param name="moduleTitle">Module title.</param>
            <param name="kind">Module kind</param>
            <param name="uiKind">Module UI kind.</param>
            <param name="departments">A list of departments to be used for this ClientModuleInfo object.</param>
            <param name="maxTasks">Number of tasks that may be dispatched in parallel</param>
            <param name="minTaskLevel">Minimum task level</param>
            <param name="maxTaskLevel">Maximum task level. If -1 then there is no upper bound.</param>
            <param name="client">Client module interface.</param>
            <param name="batchContext">If true then this client processes tasks at
            batch level. If false it processes tasks at task level. All flow-tokens are
            always generated at task level.</param>
            <param name="requiresAccessToCompleteBatch">Attended module requires 
            access to complete batch although it works in the context of a task node
            that is not at root level.</param>
            <param name="uimClient">The module uses UimData to store document or page level data
            that is based on UIM data block.</param>
            <param name="levelZeroPrefetchValueNames">Level 0 prefetch value names. This list
            may be null or empty.</param>
            <param name="levelOnePrefetchValueNames">Level 1 prefetch value names. This list
            may be null or empty.</param>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ModuleId">
            <summary>
            Module Id
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ClientModuleType">
            <summary>
            Client module type like ScanPlus, IndexPlus etc.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ModuleTitle">
            <summary>
            Module title
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ModuleKind">
            <summary>
            Client module kind
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ModuleUIKind">
            <summary>
            Client module UI kind
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.MaxTasksInParallel">
            <summary>
            This number indicates how many tasks may be dispatched for parallel 
            execution. If the module is Attended then this is ignored and only
            one task is sent at a time. This value is an indication only.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.MinTaskLevel">
            <summary>
            This client module runs at a task level that is same are greater than
            this level. Task levels are 0 based.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.MaxTaskLevel">
            <summary>
            This client module runs at a task level that is less than
            this level. Task levels are 0 based. If this value is less than 0 then
            the client has no upper bound.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ClientModule">
            <summary>
            Marker interface to dispatch tasks to.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.BatchContext">
            <summary>
            Returns true if the task expects complete batch. Returns false if the
            task expects nodes at task level. Flow tokens are always generated at
            task level. In clients like Scan, it is possible to have the client
            operate at batch context but generate flow tokens at page level.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.IsUimClient">
            <summary>
            True if the client module uses UimData to store document data.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.Description">
            <summary>
            Module description.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.RequiresAccessToCompleteBatch">
            <summary>
            If true then the client module wants access to complete batch although
            the task is not at batch level. This is allowed only for Attended
            modules and Code modules. If this is true, the extra parameter
            for IBatchContext is not null. This should be set to true only when
            it is absolutely necessary.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ClientModuleInfo.ServiceModule">
            <summary>
            Whether the module is service module.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.GetDepartments">
            <summary>
            List of departments. This list may be empty.
            </summary>
            <returns>Returns an array of department names.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.GetLevelZeroPrefetchValueNames">
            <summary>
            Returns level 0 prefetch value names.
            </summary>
            <returns>Level 0 prefetch value names.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.GetLevelOnePrefetchValueNames">
            <summary>
            Returns level 1 prefetch value names.
            </summary>
            <returns>Level 1 prefetch value names.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ClientModuleInfo.GetSetupValueNames">
            <summary>
            Module setup values names.
            </summary>
            <returns>setup values names</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.CustomCodeModule">
            <summary>
                The base class for custom code.
            </summary>
            <remarks>
                <para>A custom code assembly must contain a class that inherits 
                from this base class. Add the code that will perform custom 
                actions to the 
                <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" /> 
                method of your subclass.</para>
                <note> You custom subclass must also contain a default constructor. The example in 
                <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" /> 
                demonstrates how to create a default constructor.</note>
            </remarks>
            <example>
                <para>The following is a Visual Basic class that implements custom behaviors:</para>
<code>
Public Class MyCustomModule
    Inherits CustomCodeModule

    Public Sub New()
    End Sub

    Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)
        ' CUSTOM ACTIONS GO HERE
    End Sub

    Public Overrides Sub StartModule(ByVal startInfo As ICodeModuleStartInfo)
    End Sub

End Class
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public class MyCustomModule : CustomCodeModule
{

    public MyCustomModule()
    {
    }

    public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
    {
        // CUSTOM ACTIONS GO HERE
    }

    public override void StartModule(ICodeModuleStartInfo startInfo)
    {
    }

}
</code>
            </example>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.CustomCodeModule.CanProcessTasksInParallel">
            <summary>
                Indicates whether the custom code assembly is capable of 
                processing multiple tasks in parallel.
            </summary>
            <remarks>
                <para>You can set this property to true if your custom code 
                is capable of accepting multiple tasks at the same time--in 
                other words, if multiple instances of the 
                <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" /> 
                method can be run simultaneously without causing a conflict. 
                This is typically true if your custom task processing does 
                not read and write global data that affects more than one 
                task.</para>
                <para>Setting this property to true tells the system that it 
                is safe to send tasks in parallel. However, it does not 
                guarantee that tasks will always be sent in parallel.</para>
                <para>The default value for this property is false, meaning 
                that a new task is sent to the module only when processing 
                for the previous task is complete.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.CustomCodeModule.RequiresAccessToCompleteBatch">
            <summary>
            If true then the code requires access to complete batch irrespective
            of task level. The IBatchContext parameter in ExecuteTask() is non null.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.CustomCodeModule.IsSetupUiWpf">
            <summary>
            Indicates whether module setup UI is WPF based UI.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StartModule(Emc.InputAccel.CaptureClient.ICodeModuleStartInfo)">
            <summary>
                Runs just before the first task is processed in production 
                mode.
            </summary>
            <param name="startInfo">
                Information about the module.
            </param>
            <remarks>
                <para>For each process, this method runs only once during 
                each .NET Code Module session, as soon as the module receives 
                its first task for a batch based on that process. It runs 
                multiple times during a module session if the module receives 
                tasks based on different processes. It is followed 
                immediately by 
                <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" />.</para>
                <para>You must override this method in your custom subclass, 
                creating your own implementation. If you do not want to 
                perform any custom actions when the module starts, simply 
                leave the function body empty.</para>
                <para>The <paramref name="startInfo" /> parameter provides 
                properties and methods that affect the running instance of 
                the module.</para>
            </remarks>
            <example>
                <para>The following Visual Basic code creates a class-level variable (<c>moduleStartInfo</c>) to hold the module information. The <c>StartModule</c> method assigns the module data to the class  variable, then the <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" /> method uses it to set a status bar message.</para>
<code>
Public Class MyCustomModule
    Inherits CustomCodeModule

    Dim moduleStartInfo As ICodeModuleStartInfo

    Public Sub New()
    End Sub

    Public Overrides Sub StartModule(ByVal startInfo As ICodeModuleStartInfo)
        moduleStartInfo = startInfo
    End Sub

    Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)
        moduleStartInfo.ShowStatusMessage("Processing task...")
    End Sub

End Class
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public class MyCustomModule : CustomCodeModule
{

    public MyCustomModule()
    {
    }

    ICodeModuleStartInfo moduleStartInfo;

    public override void StartModule(ICodeModuleStartInfo startInfo)
    {
        moduleStartInfo = startInfo;
    }

    public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
    {
        moduleStartInfo.ShowStatusMessage("Processing task...");
    }

}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StopModule" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StopModule">
            <summary>
                Runs just before the .NET Code Module exits production mode.
            </summary>
            <remarks>
                <para>You may override this method in your custom subclass. 
                If you do not, no custom actions will run when the module 
                exits.</para>
                <note> When the .NET Code Module is running in application 
                mode, this method runs just after the module window is 
                closed.</note>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StartModule(Emc.InputAccel.CaptureClient.ICodeModuleStartInfo)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)">
            <summary>
                Performs task processing.
            </summary>
            <remarks>
                <para>Add your custom task processing code to this method. It 
                will be called when the batch is opened by the module.</para>
                <para>The parameters provide access to the batch data as well 
                as general information about the task.</para>
                <note> A batch node is always accessed in the context of a 
                specific batch step. The parameters to this method provide 
                access to batch nodes in the context of the .NET Code Module 
                step that is running the custom code. To retrieve node values 
                for other steps, use the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)" /> 
                method to change the context of the node.</note>
                <para>Before the <c>ExecuteTask</c> method returns, you must 
                call either 
                <see cref="M:Emc.InputAccel.CaptureClient.IClientTask.CompleteTask" /> 
                to indicate successful completion, or 
                <see cref="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)"/> 
                to mark the task as failed. If you do not call either method, 
                the module throws an exception and returns code 
                IA_ERR_RETRYSOME (-6113) to the workflow server.</para>
            </remarks>
            <param name="task">
                 Task information.
            </param>
            <param name="batchContext">
                The entire batch. The parameter provides access to all batch 
                nodes, regardless of the level at which the task was received.
                This parameter is null if RequiresAccessToCompleteBatch is false.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StartModule(Emc.InputAccel.CaptureClient.ICodeModuleStartInfo)" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.CustomCodeModule.RequiresAccessToCompleteBatch" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.CustomCodeModule.SetupCodeModule(System.Windows.Forms.Control,Emc.InputAccel.CaptureClient.IValueAccessor)">
            <summary>
                Performs custom module setup tasks.
            </summary>
            <param name="parentWindow">
                The module window. If you display a custom window, you should 
                specify this module window as its owner.
            </param>
            <param name="stepConfiguration">
                Provides access to the configuration values for the workflow 
                step. These are the step values defined generally for the 
                batch or process. To set node-specific values, use 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.ValueSet" />.
            </param>
            <returns>
                True if the configuration settings should be saved. 
                False if any configuration changes are to be discarded.
            </returns>
            <remarks>
                <para>This method applies only when the module is run in 
                setup mode. If the method exists, a custom setup option is 
                available in the module. When an administrator chooses to run 
                the custom setup, this method executes.</para>
                <para>You can display a user interface that enables the 
                administrator to change step configuration options. Choose 
                step configuration options to expose by accessing the 
                <paramref name="stepConfiguration" /> parameter. Return a 
                Boolean value indicating whether or not the configuration 
                value changes should be saved.</para>
                <note> If the entire step configuration is canceled, custom 
                changes to the configuration values are discarded regardless 
                of what value this method returns.</note>
                <para>If you do not override this method in your custom 
                subclass, the custom setup option is not available when the 
                .NET Code Module step is configured with this assembly.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.CustomCodeModule.SetupCodeModule(Emc.InputAccel.CaptureClient.IValueAccessor)">
            <summary>
                Performs custom module setup tasks.
            </summary>
            <param name="stepConfiguration">
                Provides access to the configuration values for the workflow 
                step. These are the step values defined generally for the 
                batch or process. To set node-specific values, use 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.ValueSet" />.
            </param>
            <returns>
                True if the configuration settings should be saved. 
                False if any configuration changes are to be discarded.
            </returns>
            <remarks>
                <para>This method applies only when the module is run in 
                setup mode. If the method exists, a custom setup option is 
                available in the module. When an administrator chooses to run 
                the custom setup, this method executes.</para>
                <para>You can display a user interface that enables the 
                administrator to change step configuration options. Choose 
                step configuration options to expose by accessing the 
                <paramref name="stepConfiguration" /> parameter. Return a 
                Boolean value indicating whether or not the configuration 
                value changes should be saved.</para>
                <note> If the entire step configuration is canceled, custom 
                changes to the configuration values are discarded regardless 
                of what value this method returns.</note>
                <para>If you do not override this method in your custom 
                subclass, the custom setup option is not available when the 
                .NET Code Module step is configured with this assembly.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ExternalDataSourceConnection">
            <summary>
            Represents a connection to external data source
            </summary>
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataSourceConnection.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ExternalDataSourceConnection.InternalConfigurationVersion">
            <summary>
            Configuration version used by infrastructure only. 
            Implementing class must not use this property.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataSourceConnection.Dispose">
            <summary>
            Dispose is called when a connection is given up. Implementing
            class may override to release any unmanaged resources.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IBatchContext">
            <summary>
                A batch.
            </summary>
            <remarks>
                <para>This interface provides access to an entire batch, 
                which includes batch data and some associated system 
                metadata.</para>
                <para>To access the nodes of the batch tree, use the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetRoot(System.String)" />
                method.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchContext.BatchId">
            <summary>
                Gets the unique ID of the batch in the system.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchContext.ProcessDefinitionId" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.BatchId" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchContext.BatchName">
            <summary>
                Gets or sets the name of the batch.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchContext.ProcessDefinitionId">
            <summary>
                Gets the name of the process that was used to create the 
                batch.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchContext.BatchId" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.ProcessDefinitionId" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchContext.GetRoot(System.String)">
            <summary>
                Gets the batch root node in the context of a specific batch 
                step.
            </summary>
            <remarks>
                <para>A batch node is always accessed in the context of a 
                specific batch step. The 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData" /> 
                property provides access to data that varies depending on the 
                step context.</para>
                <para>You can access the batch data from any module step, 
                regardless of which module it is. However, you must know the 
                name of the step as defined in the CaptureFlow process upon 
                which the batch is based. An exception is thrown if the 
                <paramref name="stepName" /> parameter does not match the 
                name of any step in the batch.</para>
            </remarks>
            <param name="stepName">
                The name of the batch step for which you want the root node. 
                This name is case-insensitive ("SCAN" is the same as "Scan").
            </param>
            <returns>
                The batch root node, in the context of the requested step.
            </returns>
            <example>
                <para>The following code retrieves the batch root node in the context of the step named "InputScanStep":</para>
<code>
batchContext.GetRoot("InputScanStep")
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)">
            <summary>
                Changes the step context for a batch node.
            </summary>
            <remarks>
                <para>A batch node is always accessed in the context of a 
                specific batch step. The 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData" /> 
                property provides access to data that varies depending on the 
                step context.</para>
                <para>The <c>GetStepNode</c> method takes a batch node as a 
                parameter, and returns the same batch node with the step 
                context changed to the requested step. You must know the name 
                of the step as defined in the CaptureFlow process upon which 
                the batch is based. An exception is thrown if the 
                <paramref name="stepName" /> parameter does not match the 
                name of any step in the batch.</para>
                <para>The returned batch node enables unconditional browsing 
                and is not restricted to the same subtree as the 
                <paramref name="node" /> parameter.</para>
            </remarks>
            <param name="node">
                The batch node for which you want to change the step context.
            </param>
            <param name="stepName">
                The name of the batch step to change the context to. 
                This name is case-insensitive ("SCAN" is the same as "Scan").
            </param>
            <returns>
                The batch node equivalent to <paramref name="node" />, with 
                the step context changed to <paramref name="stepName" />.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetRoot(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchContext.ReadBatchProperty(System.String)">
            <summary>
            Returns batch property value.
            </summary>
            <param name="name">Name of property.</param>
            <returns>Property value. If the property was never set then returns null.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchContext.WriteBatchProperty(System.String,System.Object)">
            <summary>
            Set batch property value.
            </summary>
            <param name="name">Name of property.</param>
            <param name="value">If value is null, the property is not set. The value
            type must be one of short, int, float, double, decimal, 
            long, bool, string, DateTime.</param>
            <returns>True if the value is written.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IBatchNode">
            <summary>
                A batch node from a workflow step.
            </summary>
            <remarks>
                <para>This interface provides access to a specific batch node. 
                You can use this interface to access node data, and to perform 
                certain operations on the structure of the batch tree.</para>
                <para>A batch node is always accessed in the context of a 
                specific batch step. Some node properties, such as 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData" />, 
                provide access to data that is dependent upon the step 
                context.</para>
                <para>Every node above level 0 can contain other nodes. You can 
                access nodes at lower levels by using the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren" /> 
                and 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" /> 
                methods.</para>
                <para>Depending on the context, you might be able to access batch 
                nodes at higher levels by using the 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Parent" /> 
                and 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" /> 
                properties and the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" /> 
                method. However, custom code access is restricted to the module 
                context of the node. Modules other than the .NET Code Module are 
                can access only the portion of the batch explicitly passed as 
                part of the task. Unless the task is passed at level 7 to the 
                context step, your custom code cannot directly access the entire 
                batch through this interface. However, you can use the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)" /> 
                method to retrieve the node in an unrestricted context.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeLevel" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.NodeData">
            <summary>
                Gets an object that provides access to data associated with 
                the node.
            </summary>
            <remarks>
                <para>To read and write values, use the 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.ValueSet" />
                property of the retrieved object.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData">
            <summary>
                Gets an object that provides access to data associated with 
                a specific step in the batch process.
            </summary>
            <remarks>
                <para>A batch node is always accessed in the context of a 
                specific batch step. The <c>StepData</c> property provides 
                access to data about the step itself.</para>
                <note> This data is independent of the actual node used to 
                retrieve it. For any node retrieved in the same step context, 
                the <c>StepData</c> property provides access to the same 
                data.</note>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.NodeData" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.Parent">
            <summary>
                Gets the parent of the context node.
            </summary>
            <remarks>
                <para>Retrieving the <c>Parent</c> property is equivalent to 
                calling 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" /> 
                with a level one higher than the context node's level.</para>
                <note> In some contexts, you cannot access nodes higher than 
                the task node.</note>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.Root">
            <summary>
                Gets the root node of the batch or task.
            </summary>
            <remarks>
                <para>This property gets the root node of the batch if 
                possible.</para>
                <para>In some contexts, you cannot access nodes higher than 
                the task node. In that case, this property gets the root node 
                of the available subtree.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.RootLevel" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetRoot(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestorNodeIdAbsolutePath" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.RootLevel">
            <summary>
                Gets the level of the root node of the batch or task.
            </summary>
            <remarks>
                <para>If the entire batch is accessible, the root level is 
                always 7.</para>
                <para>In some contexts, you cannot access nodes higher than 
                the task node. In that case, this property gets the root node 
                level of the available subtree.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNode.IsRoot">
            <summary>
                Gets a value indicating if the context node is the root node 
                of the batch or task.
            </summary>
            <remarks>
                <para>In some contexts, you cannot access nodes higher than 
                the task node. In that case, this property is true if the 
                context node is the root node of the available 
                subtree.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.EnsureNodeValues(System.Int32,System.String[])">
            <summary>
            Ensures that values are available for all the related nodes at the
            given level for the given value names. This a bulk operation and in cases
            where client is running out of process then all values are bulked and
            sent from server improving performance. 
            </summary>
            <param name="level">If less than current node level then values
            are ensured for all descendents at that level. If same or greater then
            values are ensured for that node.</param>
            <param name="valueNames">Value names for the given node level.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestorNodeIdAbsolutePath">
            <summary>
                Returns the sequence of node IDs for the context node's 
                ancestors.
            </summary>
            <remarks>
                <para>An ancestor is a node that contains the context node on 
                which the method is run. This can be the node's direct 
                container (parent node), the parent's container, and so forth 
                up to the root node of the batch.</para>
                <para>When you call this method, you get an array of node IDs 
                of all of the ancestors of the context node. The first entry 
                is the ID of the node at the highest accessible level. The 
                last entry is immediate parent's node ID.</para>
                <para>If the context node has no accessible parent nodes, the 
                resulting array is empty.</para>
                <note> In some contexts, you cannot access nodes higher than 
                the task node.</note>
            </remarks>
            <returns>
                An array of ancestor node IDs, starting from the top of the 
                tree.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)">
            <summary>
                Returns an ancestor of the context node.
            </summary>
            <remarks>
                <para>An ancestor is a node that contains the context node on 
                which the method is run. This can be the node's direct 
                container (parent node), the parent's container, and so forth 
                up to the root node of the batch. Calling <c>GetAncestor</c> 
                with a level one higher than the context node's level is 
                equivalent to retrieving the 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Parent" /> 
                property.</para>
                <note> In some contexts, you cannot access nodes higher than 
                the task node.</note>
            </remarks>
            <param name="level">
                The level of the ancestor node to retrieve.
            </param>
            <returns>
                The requested ancestor node.
            </returns>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Parent" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Root" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestorNodeIdAbsolutePath" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren">
            <summary>
                Returns the direct children of the context node.
            </summary>
            <remarks>
                <para>When you call this method, you get an array of 
                <see cref="T:Emc.InputAccel.CaptureClient.IBatchNode" /> 
                objects in the order in which they occur.</para>
                <para>Calling <c>GetChildren</c> is equivalent to calling 
                the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" /> 
                method with a level one lower than the context node's 
                level.</para>
                <para>If the context node has no child nodes, the resulting 
                array is empty.</para>
            </remarks>
            <returns>
                An array of child nodes.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchNode.Parent" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)">
            <summary>
                Returns the descendents of the context node at a specified 
                node level.
            </summary>
            <remarks>
                <para>A descendant is a node contained inside the context 
                node on which the method is run. This can be the node's direct 
                child, the child's child, and so forth down to the level 0 
                (page) nodes. Calling <c>GetDescendantNodes</c> with a level 
                one lower than the context node's level is equivalent to 
                calling the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren" /> 
                method.</para>
                <para>When you call this method, you get an array of 
                <see cref="T:Emc.InputAccel.CaptureClient.IBatchNode" /> 
                objects in the order in which they occur.</para>
                <para>If the context node has no descendant nodes at the 
                requested level, the resulting array is empty.</para>
            </remarks>
            <param name="level">
                The level at which to retrieve descendant nodes.
            </param>
            <returns>
                An array of descendant nodes at the specified level.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetAncestor(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.AddNewChild(System.Int32)">
            <summary>
                Adds a new child node.
            </summary>
            <remarks>
                <para>This method adds a child node to the context node on 
                which the method is run. The child node is inserted just 
                before the node with the ID specified as the 
                <paramref name="nodeIdBefore" /> parameter. You can retrieve 
                the unique ID of any existing batch node using the 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeId" /> 
                property.</para>
                <para>The <paramref name="nodeIdBefore" /> parameter takes 
                the following special values:</para>
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <term>Meaning</term>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>Inserts the node at the beginning of the 
                        child collection (before all other 
                        nodes).</description>
                    </item>
                    <item>
                        <term>-1</term>
                        <description>Inserts the node at the end of the 
                        child collection (after all other 
                        nodes).</description>
                    </item>
                </list>
                <note> If you specify a value that is neither the ID of a 
                child node nor one of the special values, the node is 
                inserted at the end of the child collection.</note>
                <para>You can use this method on any node at level 1 or 
                above. Attempting to add a new child to a level 0 (page) node 
                results in an exception.</para>
            </remarks>
            <param name="nodeIdBefore">
                The ID of the node before which the new node should be 
                inserted (or -1 to insert at the end).
            </param>
            <returns>The new node that has been added.</returns>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeLevel" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetChildren" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.RemoveDescendantById(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.RemoveDescendantById(System.Int32)">
            <summary>
                Removes a descendant node.
            </summary>
            <remarks>
                <para>A descendant is a node contained inside the context 
                node on which the method is run. This can be the node's direct 
                child, the child's child, and so forth down to the level 0 
                (page) nodes.</para>
                <para>Specify the node to remove according to its ID. You can 
                use the 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeId" /> 
                property to find the ID of a node. If the node specified for 
                removal does not exist or is not a descendent of the context 
                node, no change is made to the node tree.</para>
                <para>Removing a node also removes all of its child 
                nodes.</para>
            </remarks>
            <param name="nodeId">
                The ID of the node to remove.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.AddNewChild(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.MoveDescendant(System.Int32,Emc.InputAccel.CaptureClient.IBatchNode,System.Int32)">
            <summary>
                Moves a descendant node to a different position.
            </summary>
            <remarks>
                <para>A descendant is a node contained inside the context 
                node on which the method is run. This can be the node's direct 
                child, the child's child, and so forth down to the level 0 
                (page) nodes.</para>
                <para>You can use this method to change the sequence of child 
                nodes within a single parent node, or to move a node from one 
                parent to another. However, you cannot move a node to a 
                different level. For example, you can move a page node 
                (level 0) to a different document (level 1), but you cannot 
                move it so that it is contained directly within a folder 
                (level 2).</para>
                <para>Specify the node to move according to its ID. It will 
                be inserted just before the node with the ID specified as the 
                <paramref name="nodeIdBefore" /> parameter. You can use the 
                <see cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeId" /> 
                property to find the ID of a node. If the node you try to move 
                does not exist or is not a descendent of the context node, no 
                change is made to the node tree.</para>
                <para>The <paramref name="nodeIdBefore" /> parameter takes 
                the following special values:</para>
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <term>Meaning</term>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>Inserts the node at the beginning of the 
                        collection (before all other nodes).</description>
                    </item>
                    <item>
                        <term>-1</term>
                        <description>Inserts the node at the end of the 
                        collection (after all other nodes).</description>
                    </item>
                </list>
                <note> If you specify a value that is neither the ID of a 
                child node nor one of the special values, the node is 
                inserted at the end of the child collection.</note>
            </remarks>
            <param name="nodeId">
                The ID of the node to move.
            </param>
            <param name="newParent">
                The new parent node. This can be the same node as the current 
                parent node, or another node at the same level as the current 
                parent node.
            </param>
            <param name="nodeIdBefore">
                The ID of the node before which the new node should be 
                inserted (or -1 to insert at the end). If a node ID is 
                specified, it must be a direct child node of 
                <paramref name="newParent" />.
            </param>
            <returns>
                True if the node was successfully moved; false otherwise.
            </returns>
            <example>
                <para>The following Visual Basic code moves the first page of document 2 so that it becomes the last page of document 1:</para>
<code>
Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)

    Dim batchRoot As IBatchNode
    Dim batchFolder As IBatchNode
    Dim doc1 As IBatchNode
    Dim doc2 As IBatchNode
    Dim doc1Page1 As IBatchNode
    Dim doc2Page1 As IBatchNode

    batchRoot = batchContext.GetRoot("Code")
    batchFolder = batchRoot.GetDescendantNodes(2)(0)
    doc1 = batchFolder.GetChildren()(0)
    doc2 = batchFolder.GetChildren()(1)
    doc1Page1 = doc1.GetChildren()(0)
    doc2Page1 = doc2.GetChildren()(0)

    batchFolder.MoveDescendant(doc2Page1.NodeData.NodeId, doc1, -1)

    task.CompleteTask()

End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
{

    IBatchNode batchRoot;
    IBatchNode batchFolder;
    IBatchNode doc1;
    IBatchNode doc2;
    IBatchNode doc1Page1;
    IBatchNode doc2Page1;

    batchRoot = batchContext.GetRoot("Code");
    batchFolder = batchRoot.GetDescendantNodes(2)[0];
    doc1 = batchFolder.GetChildren()[0];
    doc2 = batchFolder.GetChildren()[1];
    doc1Page1 = doc1.GetChildren()[0];
    doc2Page1 = doc2.GetChildren()[0];

    batchFolder.MoveDescendant(doc2Page1.NodeData.NodeId, doc1, -1);

    task.CompleteTask();

}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.GetDescendantNodes(System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IBatchNode.AddNewChild(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.SplitParent(System.Boolean)">
            <summary>
            Splits parent node into two nodes.
            <remarks>
                <para>Parent node is splited by creating new right sibling to parent node.
                Right sibling nodes of this node and their decendant nodes becomes 
                decendant nodes of newly created parent node's sibling node.</para>
            </remarks>
            </summary>
            <param name="includeInRight">This node is included in newly created right sibling 
            of parent node if this params true, else it stays with parent node
            </param>
            <returns>Newly created right sibling to parent node</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.MergeWithSibling">
            <summary>
            Merge this node with left sibling node.
            <remarks>
                <para>Descendants of this node becomes decendants of sibling to which 
                this node is merged</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IBatchNode.GetFormattedValue(System.String,System.String)">
            <summary>
                Evaluates a string expression using values from the current 
                node context.
            </summary>
            <remarks>
                <para>The <paramref name="format" /> parameter specifies 
                the expression you want to evaluate. It can contain a 
                combination of static text and variables. Each variable name 
                must be enclosed within curly braces ( { } ). To put a curly 
                brace in the expression as a literal character, enclose it 
                within curly braces. For example, {{} outputs {</para>
                <para>The following variables are available:</para>
                <list type="table">
                    <listheader>
                        <term>Variable Name</term>
                        <term>Output</term>
                    </listheader>
                    <item>
                        <term>@N</term>
                        <description>Evaluates to the node ID as an ordinary 
                        decimal number (base 10).</description>
                    </item>
                    <item>
                        <term>@n</term>
                        <description>Evaluates to the node ID as a 
                        hexadecimal number (base 16). The evaluated 
                        expression contains only the hex digits, without any 
                        hexadecimal prefix indicator such as &amp;H or 
                        0x</description>
                    </item>
                    <item>
                        <term>@<i>x</i></term>
                        <description><i>x</i> is a single-digit integer 
                        specifying a node level. This expression evaluates to 
                        the 1-based index (position) of the node itself or 
                        its ancestor node at the specified level, within 
                        that target node's parent. 
                        For example, @0 on a page node (level 0) evaluates to 
                        its position with its containing document (level 1). 
                        @1 on the same node evaluates to the document's 
                        position within its containing folder 
                        (level 2). @7 always evaluates to 1 because the batch 
                        root node is the only node at level 7.</description>
                    </item>
                    <item>
                        <term>@<i>x</i><i>y</i></term>
                        <description><i>x</i> and <i>y</i> are each 
                        single-digit integers specifying node levels. This 
                        expression evaluates to one of the following:
                            <list type="bullet">
                                <item><description>If x &lt; y, the 1-based 
                                index (position) of the node itself or its 
                                ancestor node at level x within that target 
                                node's ancestor at level y.
                                For example, @02 on a page node (level 0) 
                                evaluates to its position among all pages 
                                within its containing folder (level 2). 
                                @01 on the same node would evaluate to its 
                                position with its containing document, which 
                                is the same value specified by 
                                @0.</description></item>
                                <item><description>If x &gt; y, the number of 
                                descendants at level y of the node or its 
                                ancestor at level x, where x must be the same 
                                as the level of the context node.
                                For example, @20 on a folder node  (level 2)
                                evaluates to the total number of pages within 
                                the folder.</description></item>
                                <item><description>If x = y, the number 0.
                                </description></item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>@(<i>valuename</i>)</term>
                        <description>Evaluates to the specified context node 
                        value. A value defined for the current 
                        .NET Code Module step can be retrieved by its simple 
                        names (for example, "SubTreeModified"). A value 
                        defined for a different batch step must be prefixed 
                        with the appropriate step name (for example, 
                        "ScanPlus.SubTreeModified").</description>
                    </item>
                    <item>
                        <term>@[<i>valuename</i>]</term>
                        <description>Works like @(<i>valuename</i>), except 
                        that if the value does not exist on the context node, 
                        the ancestors of the context node are checked in 
                        ascending order. For example, if the context node is 
                        a page (level 0), and the specified value name does 
                        not exist, the document (level 1) is checked. If the 
                        value does not exist there, the folder (level 2) is 
                        checked, and so on to the top of the tree. The 
                        <paramref name="defaultValue" /> 
                        is substituted only if the value is not found on the 
                        context node or on any of its ancestor 
                        nodes.</description>
                    </item>
                </list>
                <note> "UimData" is a reserved keyword. Do not use it 
                (in any register) in the expression of the
                <paramref name="format" /> parameter. Use 
                <see cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString" />
                method instead.</note>
            </remarks>
            <param name="format">
                The string expression to evaluate.
            </param>
            <param name="defaultValue">
                The string to substitute for each expression variable that 
                does not exist or is empty.
            </param>
            <returns>
                The evaluated string.
            </returns>
            <example>
                <para>Suppose that a scan operator's user name is "jsmith", the scan workstation's computer name is "Scan1", the ScanPlus module step name in the process is "ScanStep", and there is no value named "Prefix". If "currentNode" is a variable that holds the context node object, then the following string expression resolves to "TheDefaultValue_jsmith_Scan1":</para>
<code>
currentNode.GetFormattedValue("@(Prefix)_@(ScanStep.ScanOperator)_@(ScanStep.ScanMachine)", "TheDefaultValue")
</code>
                <para>Suppose the node tree has two documents contained within the same folder. Document 1 has 4 pages, and Document 2 has 5 pages. The context node is Document 2, Page 3.</para>
                <para><img src="node_tree.png" /></para>
                <para>The following string expressions evaluate to the results shown:</para>
                <list type="table">
                    <listheader>
                        <term>Expression</term>
                        <term>Output</term>
                    </listheader>
                    <item>
                        <term>{@0}</term>
                        <description>
                            3
                            <para>This is the index of the level 0 node (the page itself) within its parent document.</para>
                        </description>
                    </item>
                    <item>
                        <term>{@01}</term>
                        <description>
                            3
                            <para>This is the index of the level 0 node (the page itself) within its parent document. (Same as the previous example.)</para>
                        </description>
                    </item>
                    <item>
                        <term>{@02}</term>
                        <description>
                            7
                            <para>This is the 7th page within the context node's level 2 ancestor (the folder).</para>
                        </description>
                    </item>
                    <item>
                        <term>{@1}</term>
                        <description>
                            2
                            <para>This is the index of the level 1 node (the document that contains the page) within its parent folder.</para>
                        </description>
                    </item>
<!--
THESE LAST ONES SHOULD LOGICALLY WORK, BUT INTERNAL IA IMPLEMENTATION REQUIRES THE FIRST VALUE TO BE EQUIVALENT TO THE CONTEXT NODE LEVEL, SO SOMETIMES THESE PRODUCE INCORRECT RESULTS.
                    <item>
                        <term>{@10}</term>
                        <description>
                            5
                            <para>This is total number of level 0 nodes (pages) within the context node's level 1 parent (Document 2).</para>
                        </description>
                    </item>
                    <item>
                        <term>{@20}</term>
                        <description>
                            9
                            <para>This is total number of level 0 nodes (pages) within the context node's level 2 parent (Folder 1).</para>
                        </description>
                    </item>
                    <item>
                        <term>Page {@0} of {@10}</term>
                        <description>
                            Page 3 of 5
                            <para>This is a string expression combining some of the above variables. It displays the the page number within its parent document.</para>
                        </description>
                    </item>
-->
                </list>
            </example>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeId" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.ValueSet" />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IBatchNodeCollection">
            <summary>
                A collection of nodes.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNodeCollection.Count">
            <summary>
                Gets the number of nodes in the collection.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IBatchNodeCollection.Item(System.Int32)">
            <summary>
                Retrieves a batch node by position (index).
            </summary>
            <param name="index">
                The 0-based index of the node to retrieve.
            </param>
            <returns>
                The batch node at the requested position.
            </returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IClientModule">
            <summary>
            Marker interface to identify client.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientModule.StartModule(Emc.InputAccel.CaptureClient.IModuleStartInfo)">
            <summary>
            Task dispatcher calls this method exactly once to initialize the module.
            </summary>
            <param name="startInfo">The starting info that should be used for this client module.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientModule.StopModule(System.Boolean)">
            <summary>
            Called before shutdown. 
            </summary>
            <param name="saveChanges">Whether to save unsaved changes.</param>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IClientService">
            <summary>
            Identifies a client service. Client service methods are invoked
            using a method number and parameters.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientService.Call(System.String,System.Int32,System.Object[])">
            <summary>
            Call the service method identified my method id.
            </summary>
            <param name="routingContext">Routing security context.</param>
            <param name="methodId">Method number.</param>
            <param name="parameters">Zero or more parameters.</param>
            <returns>Return object. If the method represents a void call,
            then returns null.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.FailTaskReasonCode">
            <summary>
                Reason codes for a failed task, as passed by 
                <see cref="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)" />.
            </summary>
            <remarks>
                <note> Although some different reason codes return the same error 
                code to the workflow server, any error reporting for the 
                .NET Code Module itself will include the unique reason code 
                specified from this enumeration. In particular, if a trace log is 
                created when the module is run, the log will indicate which 
                reason code was specified.</note>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IClientTask.IsCancelRequested" />
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.FailTaskReasonCode.Canceled">
            <summary>
                Cancel the task. You can check the 
                <see cref="P:Emc.InputAccel.CaptureClient.IClientTask.IsCancelRequested" /> 
                property to see if a cancel request has been submitted by the 
                user or by the system framework. Returns code 
                IA_ERR_CANCEL (-4526) to the workflow server.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.FailTaskReasonCode.GenericRecoverableError">
            <summary>
                A recoverable error occurred. The task might succeed if tried 
                again. Returns code IA_ERR_RETRYSOME (-6113) to the workflow 
                server.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.FailTaskReasonCode.GenericUnrecoverableError">
            <summary>
                An unrecoverable error occurred. Returns code 
                IA_ERR_ERROR (-4528) to the workflow server.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.FailTaskReasonCode.ResourceUnavailable">
            <summary>
                A required resource is currently unavailable. Returns code 
                IA_ERR_RETRYSOME (-6113) to the workflow server.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.FailTaskReasonCode.ResourceAccessDenied">
            <summary>
                Access to a required resource has been denied. Returns code 
                IA_ERR_ERROR (-4528) to the workflow server.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.LogErrorKind">
            <summary>
            Logged error kinds.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.LogErrorKind.Fatal">
            <summary>
            Internal fatal error.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.LogErrorKind.Recoverable">
            <summary>
            Unexpected non-fatal error.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.LogErrorKind.License">
            <summary>
            Licensing error.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.LogErrorKind.ScriptEngine">
            <summary>
            Unexpected script error.
            </summary>
            <remarks>
            <para>Script errors occur in situations such as a missing script DLL or a
            missing scripted validation rule.</para>
            </remarks>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.LogErrorKind.ScriptFunction">
            <summary>
            Error thrown by script code execution.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IClientTask">
            <summary>
                A client task.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IClientTask.TaskId">
            <summary>
                Gets the unique identifier for the task.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IClientTask.ClientId" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IClientTask.ClientId">
            <summary>
                Gets the unique identifier for the client connection.
            </summary>
            <remarks>
                <para>The client ID is a GUID (globally unique identifier) 
                for the currently running instance of the module. It can be 
                useful for logging and debugging purposes.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IClientTask.TaskId" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IClientTask.ServerHostName">
            <summary>
                Gets the name of the server from which this task was received.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IClientTask.BatchNode">
            <summary>
                Gets the root node of the batch data for this task.
            </summary>
            <remarks>
                <para>This property provides access to the batch data that 
                has been passed to the task. Access is limited to the task 
                root node and its descendants.</para>
            </remarks>
            <seealso cref="T:Emc.InputAccel.CaptureClient.IBatchContext" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.ExecuteTask(Emc.InputAccel.CaptureClient.IClientTask,Emc.InputAccel.CaptureClient.IBatchContext)" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IClientTask.IsCancelRequested">
            <summary>
                Gets a value indicating whether a cancel request has been 
                submitted.
            </summary>
            <remarks>
                <para>You should periodically check this property to 
                determine if the system or the user has requested that the 
                task be canceled. You can then take appropriate action to 
                cleanly exit your task processing at the next practical 
                stopping point.</para>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientTask.CompleteTask">
            <summary>
                Finishes the task with a successful status.
            </summary>
            <remarks>
                <para>Task processing must end with a call to either 
                <c>CompleteTask</c> or 
                <see cref="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)" />.</para>
                <para>Calling <c>CompleteTask</c> indicates that processing 
                for the current task is complete and successful. The system 
                is free to move the appropriate batch data to the next step 
                of the CaptureFlow process.</para>
                <note> Calling this method invalidates the task object. Do 
                not try to access the task after calling this method.</note>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientTask.FailTask(Emc.InputAccel.CaptureClient.FailTaskReasonCode,System.Exception)">
            <summary>
                Finishes the task with a failure status.
            </summary>
            <remarks>
                <para>Task processing must end with a call to either 
                <see cref="M:Emc.InputAccel.CaptureClient.IClientTask.CompleteTask" /> 
                or <c>FailTask</c>.</para>
                <para>Calling <c>FailTask</c> indicates that processing 
                for the current task did not complete successfully. The task 
                is passed back to the system with a failure code 
                (<paramref name="reasonCode" />). The error handling logic in 
                the CaptureFlow process then routes the task according to the 
                error code information.</para>
                <note> Calling this method invalidates the task object. Do 
                not try to access the task after calling this method.</note>
            </remarks>
            <param name="reasonCode">
                The reason for the error.
            </param>
            <param name="cause">
                The exception that should be used to fail the task.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IClientTask.CompleteTask" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IClientTask.IsCancelRequested" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientTask.SaveChanges">
            <summary>
            Commits all changes to batch node data.
            </summary>
            <remarks>
            <para>The client infrastructure may cache
            batch node changes in the client side process. These changes are automatically
            saved when a task is completed and are discarded when a task
            is failed. This method allows the client module to save changes prior to
            task completion, guaranteeing that all changes done so far are
            committed.</para>
            <para>The client infrastructure does not always guarantee that all changes
            are bufferred. In some cases, changes to batch node may commit immediately
            and such changes are not rolled back if the task fails or is cancelled.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IClientTask.LogErrorMessage(Emc.InputAccel.CaptureClient.LogErrorKind,System.String,System.String)">
            <summary>
            Logs an error message to the database.
            </summary>
            <param name="errorKind">The kind of error to log.</param>
            <param name="source">The source of the error such as the name of a method.</param>
            <param name="message">The error message text.</param>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ExternalDataAccess">
            <summary>
            Represents image data used by image processing filters.
            </summary>
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ExternalDataAccess.IsMultithreadSafeConnection">
            <summary>
            True if connection may be used to make calls on multiple threads at same time.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.TestConnection(Emc.InputAccel.CaptureClient.IValueReader,System.String)">
            <summary>
            If an implementation is provided, this method must throw an exception with
            a message that identifies the reason for the connection error.
            </summary>
            <param name="connectionInfo">Connection configuration</param>
            <param name="configName">Name of configuration being tested</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.Connect(Emc.InputAccel.CaptureClient.IValueReader)">
            <summary>
            Returns a non-null connection object after connecting to data source 
            using connection configuration. If the object requires explicit
            release of resource then the object must be disposable. It is
            disposed when the connection is no longer needed. It is possible that
            a valid connection could not be established but still a non null object
            is returned so that the actual connection is attempted whenever an operation
            is tried on this connection object. Many data sources that operate across a
            network typically try to provide a tolerant connection object so that a connection
            is retried whenever needed.
            </summary>
            <param name="connection">Connection configuration</param>
            <returns>Connection object. Must not be null.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.Compile(System.String,Emc.InputAccel.CaptureClient.ITableResults)">
            <summary>
            Returns a compiled query text. The compiled object is passed in
            each invocation of QueryForValues() method. An error may be thrown
            if the query text syntax is invalid. This returned object is not
            explicitly disposed. Implementation must ensure that the returned
            object does not require explicity disposal.
            </summary>
            <param name="queryText">Query text string</param>
            <param name="parameterNamesAndTypes">Table of query paramter names and types.
            The table has the following definition: 
            "Name", "Type", "Sample". 
            The supported types are: Number, String, DateTime. Type name given 
            should be treated as case insensitive.
            </param>
            <returns>Compiled non null object.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.QueryForValues(Emc.InputAccel.CaptureClient.ExternalDataSourceConnection,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns result set after executing the compiled query in the
            context of connection object and dictionary of runtime parameters.
            </summary>
            <param name="connection">Connection object returned by Connect() method</param>
            <param name="compiledQuery">Compiled query object returned by Compile() method</param>
            <param name="parameters">Run time parameters used for substitution as needed.</param>
            <returns>Table results from data store.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ExternalDataAccess.ExecuteStatement(Emc.InputAccel.CaptureClient.ExternalDataSourceConnection,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes SQL statement or stored procedure
            </summary>
            <param name="connection">Connection object returned by Connect() method</param>
            <param name="compiledStatement">Compiled statement returned by Compile() method</param>
            <param name="parameters">Run time parameters used for substitution as needed.</param>
            <returns>result of statement execution</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor">
            <summary>
                Provides methods that can be used to read and write primitive values: strings, numbers, booleans and dates. (Added in 7.5)
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteString(System.String,System.String)">
            <summary>
                Writes a string value.
            </summary>
            <remarks>
                <para>If the specified value already exists but is not of 
                type "String", it is not updated. No exception is 
                thrown.</para>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)">
            <summary>
                Writes a 32-bit integer value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)">
            <summary>
                Writes a 64-bit integer value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDouble(System.String,System.Double)">
            <summary>
                Writes a floating-point (decimal) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteFloat(System.String,System.Single)">
            <summary>
                Writes a floating-point (single) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteBoolean(System.String,System.Boolean)">
            <summary>
                Writes a Boolean (true or false) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDateTime(System.String,System.DateTime)">
            <summary>
                Writes a date/time value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String)" />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IPrimitiveValueReader">
            <summary>
                Provides methods that can be used to read primitive values: strings, numbers, booleans and dates. (Added in 7.5)
            </summary>
            <remarks>
                <para>This interface provides read-only access to primitive values.</para>
                <para>The 
                <see cref="T:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor" /> 
                interface provides read/write access.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The integer data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String,System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)">
            <summary>
                Gets the value data of an integer value as a 64-bit integer.
            </summary>
            <remarks>
                <para>You can use this method to read any integer values that 
                are stored in 64 or fewer bits. For example, you can read an 
                integer (32-bit) value, and it will automatically be cast to a 
                64-bit long.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The integer data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String,System.Int64)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)">
            <summary>
                Gets the value data of a floating-point (decimal) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The floating-point data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String,System.Double)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDouble(System.String,System.Double)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String)">
            <summary>
                Gets the value data of a Boolean (true or false) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The Boolean data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String,System.Boolean)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteBoolean(System.String,System.Boolean)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String)">
            <summary>
                Gets the value data of a value as a string.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The data read as a string.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteString(System.String,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String)">
            <summary>
                Gets the value data of a date/time value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The date/time data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String,System.DateTime)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDateTime(System.String,System.DateTime)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String,System.Int32)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The integer data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String,System.Int64)">
            <summary>
                Gets the value data of an integer value as a 64-bit integer, 
                substituting a default value if it is not found.
            </summary>
            <remarks>
                <para>You can use this method to read any integer values that 
                are stored in 64 or fewer bits. For example, you can read an 
                integer (32-bit) value, and it will automatically be cast to a 
                64-bit long.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The integer data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String,System.Double)">
            <summary>
                Gets the value data of a floating-point (decimal) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The floating-point data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDouble(System.String,System.Double)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String,System.Boolean)">
            <summary>
                Gets the value data of a Boolean (true or false) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The Boolean data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteBoolean(System.String,System.Boolean)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String,System.String)">
            <summary>
                Gets the value data of a value as a string, 
                substituting a default value if it is not found.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The data read as a string, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteString(System.String,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String,System.DateTime)">
            <summary>
                Gets the value data of a date/time value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The date/time data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDateTime(System.String,System.DateTime)" />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ISaveStatistics">
            <summary>
            Interface <c>ISaveStatistics</c> provides interface to save processing statistics.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.Stop(System.Boolean)">
            <summary>
            Stop saving statistics.
            </summary>
            <param name="flush">Whether to flush logged pending statistic to database.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.LogClassificationStatistics(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Log page classification statistics.
            </summary>
            <param name="processName">Workflow process name.</param>
            <param name="docType">Document type.</param>
            <param name="dppName">Dispatcher project name. (Name only)</param>
            <param name="templateId">Page template id.</param>
            <param name="templateType">Page template type.</param>
            <param name="templateCode">Page template code.</param>
            <param name="pagesProcessed">Total number of pages processed.</param>
            <param name="pagesClassified">Total number of pages classified as expected.</param>
            <param name="processingTimeSeconds">Total number of seconds (time) taken to process pages. </param>
            <param name="reportTag1">First token/text to categorize statistics.</param>
            <param name="reportTag2">Second token/text to categorize statistics.</param>
            <param name="reportTag3">Third token/text to categorize statistics.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.LogIdentificationStatistics(System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Log page data identification statistics.
            </summary>
            <param name="processName">Workflow process name.</param>
            <param name="docType">Document type.</param>
            <param name="dppName">Dispatcher project name. (Name only)</param>
            <param name="templateId">Page template Id.</param>
            <param name="templateCode">Page template code.</param>
            <param name="pagesProcessed">Total number of pages processed.</param>
            <param name="processingTimeSeconds">Total number of seconds (time) taken to process pages.</param>
            <param name="reportTag1">First token/text to categorize statistics.</param>
            <param name="reportTag2">Second token/text to categorize statistics.</param>
            <param name="reportTag3">Third token/text to categorize statistics.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.LogExtractionStatistics(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Log page data extraction statistics.
            </summary>
            <param name="processName">Workflow process name.</param>
            <param name="docType">Document type.</param>
            <param name="dppName">Dispatcher project name. (Name only)</param>
            <param name="templateId">Page template Id.</param>
            <param name="templateType">Page template type.</param>
            <param name="templateCode">Page template code.</param>
            <param name="pagesProcessed">Total number of pages processed.</param>
            <param name="pagesExtractedOk">Number of pages with no unrecognized character(s) ("?") in page fields.</param>
            <param name="fieldsProcessed">Total number of fields processed.</param>
            <param name="fieldsProcessedOk">Total number of fields with no unrecognized character(s) ("?") in them.</param>
            <param name="processingTimeSeconds">Total number of seconds (time) taken to process pages.</param>
            <param name="reportTag1">First token/text to categorize statistics.</param>
            <param name="reportTag2">Second token/text to categorize statistics.</param>
            <param name="reportTag3">Third token/text to categorize statistics.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.LogDocumentStatistics(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Log document type statistics.
            </summary>
            <param name="processName">Workflow process name.</param>
            <param name="documentType">document type.</param>
            <param name="documentsProcessed">Total number of documents processed.</param>
            <param name="pagesProcessed">Total page count across all processed documents.</param>
            <param name="charactersProcessed">Total number of characters across all fields in all processed documents</param>
            <param name="documentsChanged">When the user changes a doc type from "A" to "B", the change is 
            recorded in "Changed" for doc type "A". This can be used to determine the rate of misclassified documents.</param>
            <param name="fieldsProcessed">The number of field instances processed for documents of this type: 
            a scalar field counts as 1 per doc and array fields count as 1 per row per doc.</param>
            <param name="fieldsChanged">The number of fields changed for documents of this type 
            (either by an operator or script) during processing.</param>
            <param name="charactersKeyed">Total number of keystrokes entered in any field of this doc type; 
            only includes those stored as part of the field’s value and not hotkeys, delete, or backspace</param>
            <param name="processingTimeSeconds">The total processing time in seconds.</param>
            <param name="reportTag1">First token/text to categorize statistics.</param>
            <param name="reportTag2">Second token/text to categorize statistics.</param>
            <param name="reportTag3">Third token/text to categorize statistics.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ISaveStatistics.LogFieldStatistics(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
            Log field statistics.
            </summary>
            <param name="processName">Workflow process name.</param>
            <param name="documentType">Document type.</param>
            <param name="field">The name of the field from the document type.</param>
            <param name="charactersProcessed">Total number of characters across all fields in all processed field instances.</param>
            <param name="charactersKeyed">Total number of keystrokes entered when the field has focus; 
            only includes those stored as part of the field’s value and not hotkeys, delete, or backspace</param>
            <param name="processed">The number of field instances processed: 
            a scalar field counts as 1 per doc and array fields count as 1 per row per doc.</param>
            <param name="changed">The number of fields changed (either by an operator or script) during processing.</param>
            <param name="processingTimeSeconds">Total time (in seconds) the field has focus in.</param>
            <param name="reportTag1">First token/text to categorize statistics.</param>
            <param name="reportTag2">Second token/text to categorize statistics.</param>
            <param name="reportTag3">Third token/text to categorize statistics.</param>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IStageFile">
            <summary>
                A stage file used during task processing.
            </summary>
            <remarks>
                <para>A stage file is a physical file pointed to by a value of 
                type "File". Stage files are used during batch processing, and 
                the stage files for a batch are automatically deleted from disk 
                after the batch has been completely processed.</para>
                <para>From within a process, stage files are referenced through 
                their assigned values rather than directly by file name or 
                location.</para>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.GetFileForWrite(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFile.WriteData(System.IO.Stream,System.String)">
            <summary>
                Writes data to the file from a data stream.
            </summary>
            <remarks>
                <para>This method is valid only for Output file types.</para>
            </remarks>
            <param name="data">
                The data to write.
            </param>
            <param name="fileExtension">
                The file extension to use when creating a new file. May be 
                an empty string. If the file to write to already exists, this 
                parameter is ignored.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.OpenStreamForWrite(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteBytes(System.Byte[],System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteDataFromFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadData" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFile.WriteDataFromFile(System.String)">
            <summary>
                Copies data to the file from another file.
            </summary>
            <remarks>
                <para>This method is valid only for Output file types.</para>
            </remarks>
            <param name="filePath">
                The path to the source file from which to copy the data.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.OpenStreamForWrite(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteData(System.IO.Stream,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteBytes(System.Byte[],System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadToFile(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFile.WriteBytes(System.Byte[],System.String)">
            <summary>
                Writes data to the file from a byte array.
            </summary>
            <remarks>
                <para>This method is valid only for Output file types.</para>
            </remarks>
            <param name="data">
                The data to write.
            </param>
            <param name="fileExtension">
                The file extension to use when creating a new file. May be 
                an empty string. If the file to write to already exists, this 
                parameter is ignored.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.OpenStreamForWrite(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteData(System.IO.Stream,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteDataFromFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadBytes" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFile.OpenStreamForWrite(System.String)">
            <summary>
                Opens a new file stream for write operations.
            </summary>
            <remarks>
                <para>This method is valid only for Output file types.</para>
                <para>The physical file is created when data is first 
                written to the stream.</para>
                <para>When you have finished write operations, you should 
                close the stream by calling the 
                <see cref="M:System.IO.Stream.Close" /> 
                method.</para>
            </remarks>
            <param name="fileExtension">
                The file extension to use when creating a new file. May be 
                an empty string. If the file to write to already exists, this 
                parameter is ignored.
            </param>
            <returns>
                An I/O stream object accessible for write operations.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteData(System.IO.Stream,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteBytes(System.Byte[],System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteDataFromFile(System.String)" />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IStageFileReader">
            <summary>
                A stage file used during task processing, available only for read 
                operations.
            </summary>
            <remarks>
                <para>A stage file is a physical file pointed to by a value of 
                type "File". Stage files are used during batch processing, and 
                the stage files for a batch are automatically deleted from disk 
                after the batch has been completely processed.</para>
                <para>From within a process, stage files are referenced through 
                their assigned values rather than directly by file name or 
                location.</para>
                <para>This interface provides read-only access to a stage file. 
                The 
                <see cref="T:Emc.InputAccel.CaptureClient.IStageFile" /> 
                interface provides read/write access.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStageFileReader.Initialized">
            <summary>
                Gets a value indicating if a physical stage file exists for 
                the stage file object.
            </summary>
            <remarks>
                <para>A physical file is created when data is first written 
                to a stage file. If you create a new stage file, it starts 
                out "uninitialized", meaning that no physical file exists. 
                The file is created only when data is first written to the 
                stage file through the stage file object.</para>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadData" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadBytes" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadToFile(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadData">
            <summary>
                Reads data from the file to a data stream.
            </summary>
            <remarks>
                <para>If the stage file is not initialized, an empty stream 
                is returned.</para>
                <para>When you have finished read operations, you should 
                close the stream by calling the 
                <see cref="M:System.IO.Stream.Close" /> 
                method.</para>
            </remarks>
            <returns>
                A data stream with the contents of the file.
            </returns>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStageFileReader.Initialized" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadBytes" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadToFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteData(System.IO.Stream,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadBytes">
            <summary>
                Reads data from the file to a byte array.
            </summary>
            <remarks>
                <para>If the stage file is not initialized, an empty byte 
                array is returned.</para>
            </remarks>
            <returns>
                A byte array with the contents of the file.
            </returns>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStageFileReader.Initialized" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadData" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadToFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteBytes(System.Byte[],System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadToFile(System.String)">
            <summary>
                Reads data from the stage file to another file.
            </summary>
            <remarks>
                <para>If the stage file is not initialized, an empty file is 
                created.</para>
            </remarks>
            <param name="filePath">
                The path to the file you want to create.
            </param>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStageFileReader.Initialized" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadData" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFileReader.ReadBytes" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IStageFile.WriteDataFromFile(System.String)" />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ListType">
            <summary>
            object list types
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.BatchesForModule">
            <summary>
            Batches with current module as a step
            <para>List columns:</para>
            <list type="table">
                <listheader>
                    <term>Column Name</term>
                    <term>Data type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>Id</term>
                    <term>Integer</term>
                    <description>Batch identifier</description>
                </item>
                <item>
                    <term>Name</term>
                    <term>String</term>
                    <description>Batch name</description>
                </item>
                <item>
                    <term>Time Stamp</term>
                    <term>String</term>
                    <description>Batch time stamp in server timezone in format "yyyy-MM-ddTHH:mm:ss" 
                    Where
                    <para>
                    yyyy -> Year represented by a full four or five digits, depending on the calendar used.
                    MM -> Month as digits with leading zeros for single-digit months.
                    dd -> Day of the month as digits with leading zeros for single-digit days.
                    HH -> Hours with leading zero for single-digit hours; 24-hour clock.
                    mm -> Minutes with leading zero for single-digit minutes.
                    ss -> Seconds with leading zero for single-digit seconds.
                    </para>
                    </description>
                </item>
                <item>
                    <term>Total Tasks</term>
                    <term>String</term>
                    <description>Total tasks in this batch for module</description>
                </item>
                <item>
                    <term>Priority</term>
                    <term>String</term>
                    <description>Batch priority</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.BatchesWithTasksForModule">
            <summary>
            Batches with current module as a step having ready tasks
            <para>List columns:</para>
            <list type="table">
                <listheader>
                    <term>Column Name</term>
                    <term>Data type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>Id</term>
                    <term>Integer</term>
                    <description>Batch identifier</description>
                </item>
                <item>
                    <term>Name</term>
                    <term>String</term>
                    <description>Batch name</description>
                </item>
                <item>
                    <term>Time Stamp</term>
                    <term>String</term>
                    <description>Batch time stamp in server timezone in format "yyyy-MM-ddTHH:mm:ss" 
                    Where
                    <para>
                    yyyy -> Year represented by a full four or five digits, depending on the calendar used.
                    MM -> Month as digits with leading zeros for single-digit months.
                    dd -> Day of the month as digits with leading zeros for single-digit days.
                    HH -> Hours with leading zero for single-digit hours; 24-hour clock.
                    mm -> Minutes with leading zero for single-digit minutes.
                    ss -> Seconds with leading zero for single-digit seconds.
                    </para>
                    </description>
                </item>
                <item>
                    <term>Total Tasks</term>
                    <term>String</term>
                    <description>Total tasks in this batch for module</description>
                </item>
                <item>
                    <term>Priority</term>
                    <term>String</term>
                    <description>Batch priority</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.ModuleDepartments">
            <summary>
            List of all departments that have been specified in processes and batches for a module
            <para>List columns:</para>
            <list type="table">
                <listheader>
                    <term>Column Name</term>
                    <term>Data type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>Id</term>
                    <term>Integer</term>
                    <description>Row number</description>
                </item>
                <item>
                    <term>Name</term>
                    <term>String</term>
                    <description>Department name</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.UserDepartments">
            <summary>
            List of all departments for which logged on user has permissions.
            <para>List columns:</para>
            <list type="table">
                <listheader>
                    <term>Column Name</term>
                    <term>Data type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>Id</term>
                    <term>Integer</term>
                    <description>Row number</description>
                </item>
                <item>
                    <term>Name</term>
                    <term>String</term>
                    <description>Department name</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.UserGroups">
            <summary>
            Current user groups
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.Process">
            <summary>
            Processes list.
            List of process ids.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ListType.Batches">
            <summary>
            List of all batches on server.
            <para>List columns:</para>
            <list type="table">
                <listheader>
                    <term>Column Name</term>
                    <term>Data type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>Name</term>
                    <term>String</term>
                    <description>Batch name</description>
                </item>
                <item>
                    <term>Id</term>
                    <term>Integer</term>
                    <description>Batch identifier</description>
                </item>
                <item>
                    <term>Time Stamp</term>
                    <term>String</term>
                    <description>Batch time stamp in server timezone in format "yyyy-MM-ddTHH:mm:ss" 
                    Where
                    <para>
                    yyyy -> Year represented by a full four or five digits, depending on the calendar used.
                    MM -> Month as digits with leading zeros for single-digit months.
                    dd -> Day of the month as digits with leading zeros for single-digit days.
                    HH -> Hours with leading zero for single-digit hours; 24-hour clock.
                    mm -> Minutes with leading zero for single-digit minutes.
                    ss -> Seconds with leading zero for single-digit seconds.
                    </para>
                    </description>
                </item>
                <item>
                    <term>Priority</term>
                    <term>String</term>
                    <description>Batch priority</description>
                </item>
                <item>
                    <term>Process</term>
                    <term>String</term>
                    <description>Name of process off which this batch is created</description>
                </item>
                <item>
                    <term>Server</term>
                    <term>String</term>
                    <description>Name of server where this process is hosted.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IModuleStartInfo">
            <summary>
            Interface <c>IModuleStartInfo</c> represents client module start information that
            is passed once before any task is delivered to the client. Clients use the members
            to access shared services like trace and shared resources like ParentWindow. 
            All methods are multi thread safe.
            </summary>
            <exclude />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IModuleStartInfo.ClientId">
            <summary>
            An id value assigned to this client module instance. 
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IModuleStartInfo.IsUnifiedUIApplication">
            <summary>
            If true then the calling application is a unified UI application where
            all attended modules share same UI main form and all unattended clients
            are run inproc.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IModuleStartInfo.ParentWindow">
            <summary>
            This is passed for attended clients and unattended clients if the main
            application is unified client UI based. 
            This may be ignored.        
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IModuleStartInfo.UserName">
            <summary>
            Module user name
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.ReadUserPreferences">
            <summary>
                Retrieves user preferences.
            </summary>
            <remarks>
                <para>User preferences are custom module settings specific to 
                an individual user. They are not specific to a batch or a 
                CaptureFlow process. That means that a user preference 
                stored during task processing for one batch can be retrieved 
                during task processing for a different batch. Preferences are 
                stored by the workflow server, so they are available to the 
                same user regardless of which workstation is used to process 
                tasks.</para>
                <para>To create a user preference, do the following:</para>
                <list type="number">
                    <item><description>Call <c>ReadUserPreferences</c> to 
                    retrieve a value accessor object.</description></item>
                    <item><description>Write the setting name and value to 
                    the accessor object using one of its write 
                    methods.</description></item>
                    <item><description>Call 
                    <see cref="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.SaveUserPreferences(Emc.InputAccel.CaptureClient.IValueAccessor)" /> 
                    to store the preferences.</description></item>
                </list>
                <note> Preferences are stored for the user who logs onto the 
                module. Credentials used to log onto the module are not 
                necessarily the same as the credentials used to log onto the 
                workstation operating system.</note>
            </remarks>
            <returns>
                An object that can be used to access user preferences.
            </returns>
            <example>
                <para>The following Visual Basic code sets the variable "userID" to the value of the user preference named "EmployeeNumber":</para>
<code>
Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)

    Dim page As IBatchNode
    Dim prefs As IValueAccessor
    Dim userID As String

    page = task.BatchNode
    prefs = page.StepData.ReadUserPreferences()
    userID = prefs.ReadString("EmployeeNumber")

    task.CompleteTask()

End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
{

    IBatchNode page;
    IValueAccessor prefs;
    string userID;

    page = task.BatchNode;
    prefs = page.StepData.ReadUserPreferences();
    userID = prefs.ReadString("EmployeeNumber");

    task.CompleteTask();

}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.SaveUserPreferences(Emc.InputAccel.CaptureClient.IValueAccessor)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.SaveUserPreferences(Emc.InputAccel.CaptureClient.IValueAccessor)">
            <summary>
                Saves user preferences.
            </summary>
            <remarks>
                <para>User preferences are custom module settings specific to 
                an individual user. They are not specific to a batch or a 
                CaptureFlow process. That means that a user preference 
                stored during task processing for one batch can be retrieved 
                during task processing for a different batch. Preferences are 
                stored by the workflow server, so they are available to the 
                same user regardless of which workstation is used to process 
                tasks.</para>
                <para>To create a user preference, do the following:</para>
                <list type="number">
                    <item><description>Call 
                    <see cref="M:Emc.InputAccel.CaptureClient.IStepDefinitionData.ReadUserPreferences" /> 
                    to retrieve a value accessor object.</description></item>
                    <item><description>Write the setting name and value to 
                    the accessor object using one of its write 
                    methods.</description></item>
                    <item><description>Call <c>SaveUserPreferences</c> to 
                    store the preferences.</description></item>
                </list>
                <note> Preferences are stored for the user who logs onto the 
                module. Credentials used to log onto the module are not 
                necessarily the same as the credentials used to log onto the 
                workstation operating system.</note>
            </remarks>
            <param name="preferences">
                A value accessor object that was retrieved with the 
                <see cref="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.ReadUserPreferences" />
                method.
            </param>
            <example>
                <para>The following Visual Basic code saves a user preference named "EmployeeNumber", and sets it to the value "123":</para>
<code>
Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)

    Dim page As IBatchNode
    Dim prefs As IValueAccessor

    page = task.BatchNode
    prefs = page.StepData.ReadUserPreferences()
    prefs.WriteString("EmployeeNumber", "123")
    page.StepData.SaveUserPreferences(prefs)

    task.CompleteTask()

End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
{

    IBatchNode page;
    IValueAccessor prefs;

    page = task.BatchNode;
    prefs = page.StepData.ReadUserPreferences();
    prefs.WriteString("EmployeeNumber", "123");
    page.StepData.SaveUserPreferences(prefs);

    task.CompleteTask();

}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.ReadUserPreferences" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.SetDepartmentList(System.String[])">
            <summary>
            Set module departments for whom module to accept tasks.
            </summary>
            <param name="departments">Departments to set for this module.</param>
            <returns>Departments that are passed in to set but are not defined for this module</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetDepartmentList">
            <summary>
            Get module departments for whom module is accepting tasks
            </summary>
            <returns>Module departments</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetList(Emc.InputAccel.CaptureClient.ListType)">
            <summary>
            Get a list of given type.
            </summary>
            <param name="listType">Type of list.</param>
            <returns>Results table.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetQueuedTasksCount(System.String)">
            <summary>
            Get number of queued tasks in given batch for current module.
            </summary>
            <param name="batchId">The batchId.</param>
            <returns>Number of queued tasks.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.StartTaskDelivery(System.String)">
            <summary>
            Start receiving tasks
            </summary>
            <param name="batchId">If null, then receive from all batches.
            If not null then receive only from the given batch.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.StopTaskDelivery">
            <summary>
            Stops receiving tasks.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetConnectedServers">
            <summary>
            Gets string array of connected servers URLs
            </summary>
            <returns>Array of connected servers URLs</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.Shutdown">
            <summary>
            Shutdown task service
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.IsFeatureLicensed(System.Char)">
            <summary>
            Check if module feature is licensed. 
            </summary>
            <param name="featureCode">Module feature code. 
            Valid feature codes are A to X. Feature codes Y and Z are reserved and 
            should not be requested with IsFeatureLicensed.</param>
            <returns>true if module was licenced for feature. 
            false if module is not licensed for feature.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.AreFeaturesLicensed(System.String)">
            <summary>
            Check if module features are licensed.
            </summary>
            <param name="featureCodes">Module feature codes. 
            Valid feature codes are A to X. Feature codes Y and Z are reserved and 
            should not be requested with AreFeaturesLicensed. Invalid feature code are ignored.</param>
            <returns>Returns module features codes that are licensed from requested feature codes.
            Returned feature codes are in same order as in requested feature codes.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetCommandLineParameters">
            <summary>
            Get command line parameter values.
            </summary>
            <returns>IValueReader interface.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetServers">
            <summary>
            Get servers URLs.
            </summary>
            <returns>Array of servers URLs.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.CheckPermission(System.String)">
            <summary>
            Check if user has permission granted.
            </summary>
            <param name="name">Permission name.</param>
            <returns>True if permission is granted, else false.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetStatisticsSaver">
            <summary>
            Get processing statistics saving interface object.
            </summary>
            <returns>Statistics save interface object.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.GetNotifications">
            <summary>
            Get any pending notifications.
            </summary>
            <returns>Array of pending notifications.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.ChargePageCount(Emc.InputAccel.CaptureClient.IClientTask,System.Int32)">
            <summary>
            Charge number of pages against page count license.
            </summary>
            <param name="task">Task.</param>
            <param name="pageChargeCount">Number of pages to charge against page count license.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.CreateNewBatch(System.String,System.String)">
            <summary>
            Create new batch based on a given process.
            </summary>
            <param name="batchName">Name for new batch.</param>
            <param name="processName">Name of process on which a new batch to base.</param>
            <returns>Newly created batch context.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IModuleStartInfo.CommitNewBatch(Emc.InputAccel.CaptureClient.IBatchContext)">
            <summary>
            Commit newly created batch.
            </summary>
            <param name="batchContext">New batch context.</param>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo">
            <summary>
                Startup information for the .NET Code Module.
            </summary>
            <remarks>
                <para>This interface provides access to general information about 
                the running module and its current configuration.</para>
                <para>An object of this type is passed to the 
                <see cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.StartModule(Emc.InputAccel.CaptureClient.ICodeModuleStartInfo)" /> 
                method just before the first task is processed.</para>
            </remarks>
            <example>
                <para>The following Visual Basic code shows how to create a class-level variable that provides access to the module start information from any method in the class:</para>
<code>
Public Class MyCustomModule
    Inherits CustomCodeModule
    ' VARIABLE ACCESSIBLE FROM ANYWHERE IN THE CLASS
    Dim moduleInfo As ICodeModuleStartInfo

    Public Sub New()
    End Sub

    Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)
        ' SHOW STATUS MESSAGE
        moduleInfo.ShowStatusMessage( "Task level is " + task.BatchNode.NodeData.NodeLevel.ToString() )
        task.CompleteTask()
    End Sub

    Public Overrides Sub StartModule(ByVal startInfo As ICodeModuleStartInfo)
        ' SET CLASS-LEVEL VARIABLE TO START INFORMATION
        moduleInfo = startInfo
    End Sub

End Class
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public class MyCustomModule : CustomCodeModule
{
    // VARIABLE ACCESSIBLE FROM ANYWHERE IN THE CLASS
    ICodeModuleStartInfo moduleInfo;

    public MyCustomModule()
    {
    }

    public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
    {
        // SHOW STATUS MESSAGE
        moduleInfo.ShowStatusMessage( "Task level is " + task.BatchNode.NodeData.NodeLevel.ToString() );
        task.CompleteTask();
    }

    public override void StartModule(ICodeModuleStartInfo startInfo)
    {
        // SET CLASS-LEVEL VARIABLE TO START INFORMATION
        moduleInfo = startInfo;
    }

}
</code>
            </example>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.TempDirectoryPath">
            <summary>
                Gets the full path to the local temporary folder the module 
                using.
            </summary>
            <remarks>
                <para>Use this path if your custom code needs to create a 
                temporary file. The path is provided with a trailing 
                backslash to simplify string manipulations.</para>
                <para>If you create temporary files, you are responsible for 
                deleting them before your custom code completes.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.ShowStatusMessage(System.String)">
            <summary>
                Outputs a message to the module processing log.
            </summary>
            <remarks>
                <para>Use this method to display a timestamped custom message 
                in the module window.</para>
                <note> If you call this method with an empty string, it is 
                ignored. It does not display an empty timestamped 
                message.</note>
                <para>This method has no effect if the module is running as a 
                service.</para>
            </remarks>
            <param name="message">
                The text of the message to display.
            </param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.String,System.Object[])">
            <summary>
                Writes a message to the module trace log.
            </summary>
            <remarks>
                <para>Trace messages are for debug purposes. For trace 
                messages to be output, the module must be started with the 
                -trace command line argument, as in the following 
                example:</para>
                <para>"D:\Program Files\InputAccel\Client\binnt\QuickModuleHost.exe" -modulename:Emc.InputAccel.Code -trace:c:\error.log</para>
                <para>Trace messages are written only to the file specified 
                on the command line. Trace messages are not sent to the 
                workflow server.</para>
                <para>The message you write to the trace log can include 
                variables that are replaced with values from the 
                <paramref name="runtimeValues" /> parameter. Variables are in 
                the format {n}, where n is an integer greater than or equal 
                to 0. Variables are replaced in numerical sequence.</para>
                <note> The trace log contains messages written by the module 
                itself, as well as those written by your custom code.</note>
            </remarks>
            <param name="message">
                The message to write to the trace log.
            </param>
            <param name="runtimeValues">
                Replacement values for the variables in the 
                <paramref name="message" /> parameter. This can be a single 
                value or an array of values. Numbers are converted 
                automatically to strings.
            </param>
            <example>
                <para>The following Visual Basic code writes a trace message with information about special folders on the system. Notice that the array items are written in reverse order because the variable {1} occurs before the variable {0} in the message string.</para>
<code>
Public Overrides Sub StartModule(ByVal startInfo As ICodeModuleStartInfo)
    Dim replacementValues(2) As String
    replacementValues(0) = startInfo.TempDirectoryPath
    replacementValues(1) = System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)
    startInfo.Trace("User's document folder: ""{1}"". Current temporary folder: ""{0}"".", replacementValues)
End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void StartModule(ICodeModuleStartInfo startInfo)
{
    string[] replacementValues = new string[2];
    replacementValues[0] = startInfo.TempDirectoryPath;
    replacementValues[1] = System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments);
    startInfo.Trace( "User's document folder: \"{1}\". Current temporary folder: \"{0}\".", replacementValues );
}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.Exception,System.String,System.Object[])" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.Exception,System.String,System.Object[])">
            <summary>
                Writes a message to the module trace log, with exception data.
            </summary>
            <remarks>
                <para>Trace messages are for debug purposes. For trace 
                messages to be output, the module must be started with the 
                -trace command line argument, as in the following 
                example:</para>
                <para>"D:\Program Files\InputAccel\Client\binnt\QuickModuleHost.exe" -modulename:Emc.InputAccel.Code -trace:c:\error.log</para>
                <para>Trace messages are written only to the file specified 
                on the command line. Trace messages are not sent to the 
                workflow server.</para>
                <para>The message you write to the trace log can include 
                variables that are replaced with values from the 
                <paramref name="runtimeValues" /> parameter. Variables are in 
                the format {n}, where n is an integer greater than or equal 
                to 0. Variables are replaced in numerical sequence. If the 
                same numbered variable is used twice, it is replaced both 
                times by the same runtime value.</para>
                <note> The trace log contains messages written by the module 
                itself, as well as those written by your custom code.</note>
            </remarks>
            <param name="exception">
                The exception object to add to the trace message.
            </param>
            <param name="message">
                The message to write to the trace log.
            </param>
            <param name="runtimeValues">
                Replacement values for the variables in the 
                <paramref name="message" /> parameter. This can be a single 
                value or an array of values. Numbers are converted 
                automatically to strings.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.String,System.Object[])" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.StringToUimData(System.String)">
            <summary>
            Parses a string into a document data object.
            </summary>
            <remarks>
            <para>This method enables a script to convert a string IA value to a document
            for reading or modifying values. If the value is changed, it will typically be
            converted back to a string using 
            <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)"/> 
            and written back to the IA value.</para>
            </remarks>
            <param name="uimDataString">The document data as a string.</param>
            <returns>The parsed document data object.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)">
            <summary>
            Serializes a document data object to a string.
            </summary>
            <remarks>
            <para>This method enables a script to convert a document data object to 
            a string for storing in an IA value. Typically document data will either 
            have been parsed from an IA value using
            <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.StringToUimData(System.String)"/>
            or created using
            <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.NewUimData(System.String)"/>.</para>
            </remarks>
            <param name="uimDataContext">The document data object to serialize.</param>
            <returns>The document data as a string.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.NewUimData(System.String)">
            <summary>
            Creates a new document data object for the specified document type.
            </summary>
            <remarks>
            <para>The document data created by this method will typically be
            converted to a string using 
            <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)"/> 
            and written to an IA value.</para>
            </remarks>
            <param name="documentType">The type of document to create.</param>
            <returns>The new document data object.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.FindAnnotationElements(System.Byte[])">
            <summary>
            Finds annotations in a TIFF image. (Added in 7.5)
            </summary>
            <param name="tiffImageBytes">An array of bytes that represents a TIFF image.</param>
            <returns>An array of annotations. The array is empty if no annotations are found.</returns>
            <remarks>
                <para>Annotations are only supported for TIFF images and the annotations must have 
                been created using standard Captiva modules.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IAnnotationElementInfo">
            <summary>
            Information about an annotation on an image. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IAnnotationElementInfo.AnnotationType">
            <summary>
            Gets the type of the annotation.
            </summary>
            <remarks>
                <para>The returned value will be one of the following.</para>
                <list type="bullet">
                    <item>None</item>
                    <item>Highlight</item>
                    <item>Redact</item>
                    <item>Comment</item>
                    <item>Stamp</item>
                    <item>Text</item>
                    <item>Line</item>
                </list>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IAnnotationElementInfo.Rectangle">
            <summary>
            Gets the rectangle in pixels for the annotation location.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IAnnotationElementInfo.Text">
            <summary>
            Gets the text of the annotation if its type supports text.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.INodeData">
            <summary>
                Information about a batch node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.BatchId">
            <summary>
                Gets the ID of the batch that contains this node.
            </summary>
            <remarks>
                <para>The batch ID is unique across all batches on the 
                workflow server.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.ProcessDefinitionId" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchContext.BatchId" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.BatchName">
            <summary>
                Gets the name of the batch that contains this node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.NodeId">
            <summary>
                Gets the ID of the node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.NodeLevel">
            <summary>
                Gets the batch level of the node.
            </summary>
            <remarks>
                <para>The level can be between 0 (page) and 7 (batch), 
                inclusive.</para>
            </remarks>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.IsPage" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.TaskLevel" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.IsPage">
            <summary>
                Gets a value indicating if this is a page (level 0) node.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeLevel" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.ValueSet">
            <summary>
                Gets an object that can be used to read and write node values.
            </summary>
            <remarks>
                <para>A batch node is always accessed in the context of a 
                specific batch step. This property enables you to access node 
                values for the context step. To retrieve node values for 
                other steps, use the 
                <see cref="M:Emc.InputAccel.CaptureClient.IBatchContext.GetStepNode(Emc.InputAccel.CaptureClient.IBatchNode,System.String)" /> 
                method to change the context of the node.</para>
            </remarks>
            <example>
                <para>The following Visual Basic code sets the task root node's "IndexPlus.TreeNodeModified" value equal to its "ScanPlus.TreeNodeModified" value.</para>
<code>
Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)

    Dim page As IBatchNode
    Dim pageScan As IBatchNode
    Dim pageIndex As IBatchNode
    Dim modified As Integer

    page = task.BatchNode

    ' GET SCANPLUS MODIFIED FLAG
    pageScan = batchContext.GetStepNode(page, "ScanPlus")
    modified = pageScan.NodeData.ValueSet.ReadInt("TreeNodeModified")

    ' SET INDEXPLUS MODIFIED FLAG
    pageIndex = batchContext.GetStepNode(page, "IndexPlus")
    pageIndex.NodeData.ValueSet.WriteInt("TreeNodeModified", modified)

    task.CompleteTask()

End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
{

    IBatchNode page;
    IBatchNode pageScan;
    IBatchNode pageIndex;
    int modified;

    page = task.BatchNode;

    // GET SCANPLUS MODIFIED FLAG
    pageScan = batchContext.GetStepNode(page, "ScanPlus");
    modified = pageScan.NodeData.ValueSet.ReadInt("TreeNodeModified");

    // SET INDEXPLUS MODIFIED FLAG
    pageIndex = batchContext.GetStepNode(page, "IndexPlus");
    pageIndex.NodeData.ValueSet.WriteInt("TreeNodeModified", modified);

    task.CompleteTask();

}
</code>
            </example>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.INodeData.Backside">
            <summary>
            Gets or sets a value indicating whether this is backside of a page.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.INodeData.GetThumbnailForImage(System.String)">
            <summary>
            Returns thumbnail image data for a given image value name. Returns
            null if thumbnail data is not available or the image value name does
            not represent an image.
            </summary>
            <param name="imageValueName">Image value name. The value must represent image
            data.</param>
            <returns>Thumbnail image data bytes or empty array.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.INodeData.SetThumbnailForImage(System.String,System.Byte[])">
            <summary>
            Sets thumbnail image data for a given image value. 
            </summary>
            <param name="imageValueName">Image value name. The value must represent image
            data.</param>
            <param name="data">Thumbnail image data.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.INodeData.StringToUimData(System.String)">
            <summary>
            Parses a string into a document data object.
            </summary>
            <remarks>
            <para>This method enables a script to convert a string IA value to a document
            for reading or modifying values. If the value is changed, it will typically be
            converted back to a string using 
            <see cref="M:Emc.InputAccel.CaptureClient.INodeData.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)"/> 
            and written back to the IA value.</para>
            </remarks>
            <param name="uimDataString">The document data as a string.</param>
            <returns>The parsed document data object.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.INodeData.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)">
            <summary>
            Serializes a document data object to a string.
            </summary>
            <remarks>
            <para>This method enables a script to convert a document data object to 
            a string for storing in an IA value. Typically document data will either 
            have been parsed from an IA value using
            <see cref="M:Emc.InputAccel.CaptureClient.INodeData.StringToUimData(System.String)"/>
            or created using
            <see cref="M:Emc.InputAccel.CaptureClient.INodeData.NewUimData(System.String)"/>.</para>
            </remarks>
            <param name="uimDataContext">The document data object to serialize.</param>
            <returns>The document data as a string.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.INodeData.NewUimData(System.String)">
            <summary>
            Creates a new document data object for the specified document type.
            </summary>
            <remarks>
                <para>The document data created by this method will typically be
                converted to a string using 
                <see cref="M:Emc.InputAccel.CaptureClient.INodeData.UimDataToString(Emc.InputAccel.UimScript.IUimDataContext)"/> 
                and written to an IA value.</para>
            </remarks>
            <param name="documentType">The type of document to create.</param>
            <returns>The new document data object.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IStepDefinitionData">
            <summary>
                A workflow step in a batch.
            </summary>
            <remarks>
                <para>This interface is accessed through the 
                <see cref="P:Emc.InputAccel.CaptureClient.IBatchNode.StepData" />
                property of a batch node.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.ProcessDefinitionId">
            <summary>
                Gets the ID of the CaptureFlow process upon which the batch 
                that contains this step is based.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.BatchId" />
            <seealso cref="P:Emc.InputAccel.CaptureClient.IBatchContext.ProcessDefinitionId" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.StepName">
            <summary>
                Gets the name of the step in the CaptureFlow process.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.ClientModuleType" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.StepId">
            <summary>
                Gets the step identification number within the process definition.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.ClientModuleType">
            <summary>
                Gets the ID of the module that the workflow step uses.
            </summary>
            <example>
                <para>The module ID for IndexPlus is INDXPLUS.</para>
            </example>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.StepName" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.TaskLevel">
            <summary>
                Gets the node level at which tasks are passed to the workflow 
                step.
            </summary>
            <seealso cref="P:Emc.InputAccel.CaptureClient.INodeData.NodeLevel" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IStepDefinitionData.StepConfiguration">
            <summary>
                Gets an object that can be used to read configuration values 
                for the workflow step.
            </summary>
            <remarks>
                <para>Step configuration values are global values that are 
                independent of batch nodes. You can use the returned object 
                to retrieve both built-in step values and custom step values 
                added during the designing of the CaptureFlow process.</para>
                <para>You cannot write step configuration values with this 
                method.</para>
            </remarks>
            <seealso cref="M:Emc.InputAccel.CaptureClient.CustomCodeModule.SetupCodeModule(System.Windows.Forms.Control,Emc.InputAccel.CaptureClient.IValueAccessor)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IStepDefinitionData.GetValueDefinitionSet">
            <summary>
                Returns an array of all value definitions defined for the 
                workflow step.
            </summary>
            <remarks>
                <para>This method provides access to the definition 
                information for the values, not the value data itself. For 
                example, you can use it determine a value's data type, or 
                whether it is an input value.</para>
                <para>Values are typically defined in a Module Definition 
                File (MDF). You cannot modify value definitions through the 
                <c>GetValueDefinitionSet</c> method.</para>
            </remarks>
            <returns>
                An array of value definitions.
            </returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ExpectedRowCount">
            <summary>
            Values that indicate the number of rows that are expected to be returned by
            <see cref="M:Emc.InputAccel.UimScript.IUimDataContext.ValidateQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Emc.InputAccel.CaptureClient.ExpectedRowCount)"/>.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.Zero">
            <summary>
            Zero rows
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.One">
            <summary>
            Exactly one row
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.ZeroOrOne">
            <summary>
            Zero or one row
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.OneOrMore">
            <summary>
            One or more rows
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.TwoOrMore">
            <summary>
            Two or more rows
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureClient.ExpectedRowCount.ZeroOrMore">
            <summary>
            Zero or more rows
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ITableRow">
            <summary>
            Represents a table row containing named fields.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableRow.FieldCount">
            <summary>
            Gets the number of fields in the row.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableRow.RowStatus">
            <summary>
            Gets or sets the status of the row.
            </summary>
            <remarks>
            <para>
            The value can contain one of 'I' for insert, 'U' for update, 'D' for delete, 
            and 'S' for save operations. Save does an insert of update as needed.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableRow.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <remarks>
            <para>The property throws an exception if the index is out of range.</para>
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>The value associated with the specified index.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsString(System.Int32)">
            <summary>
            Gets the value of the specified field as a string.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to "false" or "true".
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>The field value as a string or an empty string if the index is out of range.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsString(System.String)">
            <summary>
            Gets the value of the specified field as a string.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to "false" or "true".
            </remarks>
            <param name="fieldName">Field name.</param>
            <returns>The field value as a string or an empty string if the field is not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsDouble(System.Int32)">
            <summary>
            Gets the value of the specified field as a double.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>The field value as a double or 0 if the index is out of range.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsDouble(System.String)">
            <summary>
            Gets the value of the specified field as a double.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            </remarks>
            <param name="fieldName">Field name.</param>
            <returns>The field value as a double or 0 if the field name is not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsInt(System.Int32)">
            <summary>
            Gets the value of the specified field as a 32-bit integer (Int32).
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>Value as int.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsInt(System.String)">
            <summary>
            Gets the value of the specified field as a 32-bit integer (Int32).
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            </remarks>
            <param name="fieldName">Field name.</param>
            <returns>Value as int.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsDateTime(System.Int32)">
            <summary>
            Gets the value of the specified field as a DateTime.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Only dates and dates in string format can be converted.
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>Value as datetime.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsDateTime(System.String)">
            <summary>
            Gets the value of the specified field as a DateTime.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Only dates and dates in string format can be converted.
            </remarks>
            <param name="fieldName">Field name.</param>
            <returns>Value as datetime.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsBoolean(System.Int32)">
            <summary>
            Gets the value of the specified field as a boolean.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown. 
            Values that can be converted are 0, 1, or "true" or "false", both case-insensitive.
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <returns>Value as boolean.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.AsBoolean(System.String)">
            <summary>
            Gets the value of the specified field as a boolean.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown. 
            Values that can be converted are 0, 1, or "true" or "false", both case-insensitive.
            </remarks>
            <param name="fieldName">Field name.</param>
            <returns>Value as boolean.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.IsSameValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Determines whether the value at a specified index is the same as another value.
            </summary>
            <remarks>
            <para>
            The method throws an exception if the index is out of range.
            </para>
            <para>
            The method returns true if the two values cannot be compared. For example, 
            a double and an integer can be compared because both are numbers, but a double
            and a string cannot be compared.
            </para>
            </remarks>
            <param name="index">The zero-based index of the field.</param>
            <param name="value">The value to compare to the field value.</param>
            <param name="ignoreCase">true to ignore case when comparing strings.</param>
            <returns>true if the values are the same or cannot be compared.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableRow.Format(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Converts the input text by replacing variable tokens.
            </summary>
            <param name="formatText">Input text as per supported syntax.</param>
            <param name="defaultValue">In case of error for a format token, this default value
            is substituted.</param>
            <param name="cultureName">Optional parameter. If it is empty, current machine's
            installed culture is used. Culture is used for month names and default short
            date format and decimal separator.</param>
            <param name="defaultDateFormat">Optional. If the format text does not specify format specifier,
            and this value is not empty, then this is used to format date values.</param>
            <param name="defaultNumberFormat">Optional. If the format text does not specify format specifier,
            and this value is not empty, then this is used to format numbers.</param>
            <returns>String with substitutions.</returns>
            <exclude />
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ITableResults">
            <summary>
            Represents a table as an array of rows that contain named fields.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableResults.TableName">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableResults.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITableResults.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <remarks>
            <para>The property throws an exception if the index is out of range.</para>
            </remarks>
            <param name="index">The zero-based index of the row to get.</param>
            <returns>The specified table row</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableResults.GetFieldNames">
            <summary>
            Gets an names of all the fields in the table.
            </summary>
            <returns>Field names</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableResults.GetFieldHelpText(System.String)">
            <summary>
            Gets the help text for the specified field.
            </summary>
            <remarks>
            <para>
            The method throws an exception if the specified field is not in the table.
            </para>
            </remarks>
            <param name="fieldName">The name of the field to retrieve</param>
            <returns>The help text if populated. Null if the table has no help text.</returns>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITableResults.GetFieldIndex(System.String)">
            <summary>
            Gets the index of the specified field name.
            </summary>
            <param name="fieldName">The name of the field to find.</param>
            <returns>The zero-based index of the field, -1 if the field is not in the table.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.ITreeNodeAccessor">
            <summary>
            Interface <c>ITreeNodeAccessor</c> is an accessor object to read the 
            node structure and node values of a hierarchical balanced tree.
            The leaf nodes are at level 0 and the level increases as you navigate
            to the root. The node values are accessed through value names.
            The node is represented by an integer node id value.
            </summary>
            <exclude />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.RootNode">
            <summary>
            Root node id represented by this object.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.StructureVersion">
            <summary>
            Node structure version. A change in version number indicates that the contents
            had changed.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.Browse(System.Int32,System.Int32)">
            <summary>
            Returns the ancestor or descendant children for a given node id.
            </summary>
            <param name="nodeId">Reference node id.</param>
            <param name="level">Browse level. If lower then descendants are returned.
            if higher then ancestors are returned.</param>
            <returns>Array of node id values. If level is higher then, a single
            ancestor node is returned. If level same then reference node is 
            returned. If level is lower, zero or more descendant nodes are
            returned.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.GetLevel(System.Int32)">
            <summary>
            Return the level for the node. 0 is leaf level.
            </summary>
            <param name="nodeId">Reference node id.</param>
            <returns>Level index. 0 is leaf level.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.GetProperty(System.Int32,System.String)">
            <summary>
            Returns the property value. May throw an error if the property
            does not exist.
            </summary>
            <param name="nodeId">Reference node id.</param>
            <param name="propertyName">Property name.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.ITreeNodeAccessor.GetNodeTitle(System.Int32)">
            <summary>
            Get a UI title for a node.
            </summary>
            <param name="nodeId">Node id.</param>
            <returns>Title string for the node.</returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IValueAccessor">
            <summary>
                Provides methods that can be used to read and write values.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteMultipleValues(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Writes multiple values.
            </summary>
            <remarks>
                <para>You can write values with different data types at the 
                same time using this method. The data written for each value 
                must match the data type defined for that value.</para>
                <para>If the specified values do not exist, they are created 
                as runtime values.</para>
            </remarks>
            <param name="input">
                A list of name/value pairs for the values to write.
            </param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignFile(System.String,Emc.InputAccel.CaptureClient.IStageFileReader)">
            <summary>
                Assigns a stage file object to a value.
            </summary>
            <remarks>
                <para>To assign a file directly from one value to another 
                without modifying the file data, is more efficient to use 
                <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignValue(System.String,Emc.InputAccel.CaptureClient.IValueReader,System.String)" />.
                </para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The stage file object to assign.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignValue(System.String,Emc.InputAccel.CaptureClient.IValueReader,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.GetFileForWrite(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.GetFileForWrite(System.String)">
            <summary>
                Retrieves a stage file object for write operations.
            </summary>
            <remarks>
                <para>This method is obsolete and is retained only for backward compatibility.
                New code should use 
                <see cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteFileData(System.String,System.Byte[],System.String)"/>
                instead.</para>
                <para>If the specified value is an Output value and is not 
                yet assigned any file data, this method creates a new, empty 
                file that you can write to.</para>
                <para>If the specified value is an Input value and is not 
                yet assigned any file data, you should not attempt to write 
                to it.</para>
            </remarks>
            <param name="name">
                The name of the value to retrieve the file from.
            </param>
            <returns>
                A stage file object that can be written to.
            </returns>
            <seealso cref="P:Emc.InputAccel.CaptureClient.IStageFileReader.Initialized" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueReader.ReadFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignFile(System.String,Emc.InputAccel.CaptureClient.IStageFileReader)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteBytes(System.String,System.Byte[])">
            <summary>
                Writes binary data to a value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="byteData">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueReader.ReadBytes(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignValue(System.String,Emc.InputAccel.CaptureClient.IValueReader,System.String)">
            <summary>
                Assigns value data directly from one value to another value.
            </summary>
            <remarks>
                <para>The data types of the two values either must be the 
                same, or the system must be able to convert the source data 
                to the destination value's data type.</para>
                <para>File value data that is assigned from one value to 
                another does not create a new physical file on disk. 
                Instead, a new reference to the same file is created.</para>
            </remarks>
            <param name="name">
                The name of the destination value to assign the data to.
            </param>
            <param name="source">
                The value set that contains the source data.
            </param>
            <param name="sourceValueName">
                The name of the source value to retrieve the data from.
            </param>
            <example>
                <para>The following Visual Basic code assigns the value data from the ScanPlus value named "BatchProcessingTime" to a custom batch value named "ScanProcessingTime":</para>
<code>
Public Overrides Sub ExecuteTask(ByVal task As IClientTask, ByVal batchContext As IBatchContext)

    Dim batchRootScanPlus As IBatchNode
    Dim batchRootCustomValues As IBatchNode

    batchRootScanPlus = batchContext.GetRoot("ScanPlus")
    batchRootCustomValues = batchContext.GetRoot("CustomValues")

    batchRootCustomValues.NodeData.ValueSet.AssignValue("ScanProcessingTime", batchRootScanPlus.NodeData.ValueSet, "BatchProcessingTime")

    task.CompleteTask()

End Sub
</code>
    <para>Here is the same example in Visual C#:</para>
<code>
public override void ExecuteTask(IClientTask task, IBatchContext batchContext)
{

    IBatchNode batchRootScanPlus;
    IBatchNode batchRootCustomValues;

    batchRootScanPlus = batchContext.GetRoot("ScanPlus");
    batchRootCustomValues = batchContext.GetRoot("CustomValues");

    batchRootCustomValues.NodeData.ValueSet.AssignValue("ScanProcessingTime", batchRootScanPlus.NodeData.ValueSet, "BatchProcessingTime");

    task.CompleteTask();

}
</code>
            </example>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueReader.ReadFile(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignFile(System.String,Emc.InputAccel.CaptureClient.IStageFileReader)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteFileData(System.String,System.Byte[],System.String)">
            <summary>
            Write file data to a file type value.
            </summary>
            <param name="name">
                File type value name.
            </param>
            <param name="data">
                The data to write.
            </param>
            <param name="fileExtension">
                The file extension to use when creating a new file. May be 
                an empty string. If the file to write to already exists, this 
                parameter is ignored.
            </param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteObject(System.String,System.Object)">
            <summary>
            Write value.
            </summary>
            <param name="name">The name of the value to write.</param>
            <param name="value">The value to write. If value is null then 
            a type specific default is written. The object must be one
            of the following types. If the type of the value is known then
            an attempt is made to convert the value. If the conversion fails,
            an error is thrown.
            <list type="bullet">
            <item><description>byte, short - stored as 32bit integer.</description></item>
            <item><description>int - 32 bit integer</description></item>
            <item><description>long - 64 bit integer</description></item>
            <item><description>float - saved as double value.</description></item>
            <item><description>double</description></item>
            <item><description>string</description></item>
            <item><description>bool</description></item>
            <item><description>DateTime</description></item>
            <item><description>IValueReader</description></item>
            </list></param>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteString(System.String,System.String)">
            <summary>
                Writes a string value.
            </summary>
            <remarks>
                <para>If the specified value already exists but is not of 
                type "String", it is not updated. No exception is 
                thrown.</para>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteInt(System.String,System.Int32)">
            <summary>
                Writes a 32-bit integer value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteLong(System.String,System.Int64)">
            <summary>
                Writes a 64-bit integer value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteDouble(System.String,System.Double)">
            <summary>
                Writes a floating-point (decimal) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteFloat(System.String,System.Single)">
            <summary>
                Writes a floating-point (single) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteBoolean(System.String,System.Boolean)">
            <summary>
                Writes a Boolean (true or false) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteDateTime(System.String,System.DateTime)">
            <summary>
                Writes a date/time value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String)" />
            <exclude/>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IValueDefinition">
            <summary>
                The definition of a value.
            </summary>
            <remarks>
                <para>A value is a system variable that can be set to specific 
                value data at different times during batch processing. Values are 
                typically defined in Module Definition Files (MDFs).</para>
                <para>This interface provides access to the definition of a value. 
                You cannot set or retrieve actual value data through this 
                interface. Value data is set and retrieved through the 
                <see cref="T:Emc.InputAccel.CaptureClient.IValueAccessor" /> 
                and 
                <see cref="T:Emc.InputAccel.CaptureClient.IValueReader" /> 
                interfaces.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.Name">
            <summary>
                Gets the name of the value.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.DataType">
            <summary>
                Gets the data type of the value.
            </summary>
            <remarks>
                <para>This property is the actual .NET type of the data, not 
                a string representation of the type name. It is one of the 
                following data types:</para>
                <list type="bullet">
                    <item><description>System.<see cref="T:System.Boolean" /></description></item>
                    <item><description>System.<see cref="T:System.Byte" />[]</description></item>
                    <item><description>System.<see cref="T:System.DateTime" /></description></item>
                    <item><description>System.<see cref="T:System.Double" /></description></item>
                    <item><description>System.<see cref="T:System.Int16" /></description></item>
                    <item><description>System.<see cref="T:System.Int32" /></description></item>
                    <item><description>System.<see cref="T:System.Int64" /></description></item>
                    <item><description>Emc.InputAccel.CaptureClient.<see cref="T:Emc.InputAccel.CaptureClient.IStageFileReader" /></description></item>
                    <item><description>Emc.InputAccel.CaptureClient.<see cref="T:Emc.InputAccel.CaptureClient.IValueReader" /></description></item>
                    <item><description>Emc.InputAccel.CaptureClient.<see cref="T:Emc.InputAccel.CaptureClient.IValueReader" />[]</description></item>
                    <item><description>System.<see cref="T:System.String" /></description></item>
                </list>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.Level">
            <summary>
                Gets the node level at which the value applies.
            </summary>
            <remarks>
                <para>If the value does not apply to specific node levels, 
                this property is set to -1.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.Input">
            <summary>
                Gets a value indicating if this is an Input value.
            </summary>
            <remarks>
                <para>A value can be both an Input value and an Output value. 
                Check the 
                <see cref="P:Emc.InputAccel.CaptureClient.IValueDefinition.Output" /> 
                property to determine if this is also an Output value.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.Output">
            <summary>
                Gets a value indicating if this is an Output value.
            </summary>
            <remarks>
                <para>A value can be both an Input value and an Output value. 
                Check the 
                <see cref="P:Emc.InputAccel.CaptureClient.IValueDefinition.Input" /> 
                property to determine if this is also an Input value.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinition.DefaultValueData">
            <summary>
                Gets the default value associated with the definition.
            </summary>
            <remarks>
                <para>If no default value is defined, a generic 
                <see cref="T:System.Object" /> is retrieved.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IValueDefinitionSet">
            <summary>
                A collection of value definitions.
            </summary>
            <seealso cref="T:Emc.InputAccel.CaptureClient.IValueDefinition" />
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinitionSet.Count">
            <summary>
                Gets the total number of value definitions in the definition 
                set.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.IValueDefinitionSet.Item(System.Int32)">
            <summary>
                Gets a value definition from the value definition set by 
                index (position).
            </summary>
            <param name="index">
                The 0-based index of the definition to retrieve.
            </param>
            <returns>The value definition at the given index.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueDefinitionSet.Find(System.String)">
            <summary>
                Gets a value definition from the value definition set by name.
            </summary>
            <remarks>
                <para>If a value with the specified name is not found, a null 
                value is returned.</para>
            </remarks>
            <param name="name">
                The name of the value to retrieve the definition for. The 
                name is case-insensitive ("VALUE" is the same as "value").
            </param>
            <returns>
                The requested value definition.
            </returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.IValueReader">
            <summary>
                Provides methods that can be used to read values.
            </summary>
            <remarks>
                <para>This interface provides read-only access to values.</para>
                <para>The 
                <see cref="T:Emc.InputAccel.CaptureClient.IValueAccessor" /> 
                interface provides read/write access.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.GetValueNames">
            <summary>
                Gets the names of all values available in the current context.
            </summary>
            <remarks>
                <para>This list includes values defined at design time as well as those added dynamically
                at run time. However, the list is limited to the names of values that have been previously
                read as part of the task.</para>
            </remarks>
            <returns>
                An array of value names.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadObject(System.String)">
            <summary>
                Gets the value data of a value as a generic object.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The data read as an object.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadFile(System.String)">
            <summary>
                Gets the value data of a file value as a stage file object.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The stage file object.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.AssignFile(System.String,Emc.InputAccel.CaptureClient.IStageFileReader)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.GetFileForWrite(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueReader.ReadBytes(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadBytes(System.String)">
            <summary>
                Gets the binary data of a value as a byte array.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The byte data of the value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueAccessor.WriteBytes(System.String,System.Byte[])" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IValueReader.ReadFile(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadInt(System.String)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The integer data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String,System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadLong(System.String)">
            <summary>
                Gets the value data of an integer value as a 64-bit integer.
            </summary>
            <remarks>
                <para>You can use this method to read any integer values that 
                are stored in 64 or fewer bits. For example, you can read an 
                integer (32-bit) value, and it will automatically be cast to a 
                64-bit long.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The integer data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String,System.Int64)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadDouble(System.String)">
            <summary>
                Gets the value data of a floating-point (decimal) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The floating-point data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String,System.Double)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDouble(System.String,System.Double)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadBoolean(System.String)">
            <summary>
                Gets the value data of a Boolean (true or false) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The Boolean data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String,System.Boolean)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteBoolean(System.String,System.Boolean)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadString(System.String)">
            <summary>
                Gets the value data of a value as a string.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The data read as a string.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteString(System.String,System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadDateTime(System.String)">
            <summary>
                Gets the value data of a date/time value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The date/time data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String,System.DateTime)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDateTime(System.String,System.DateTime)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadInt(System.String,System.Int32)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The integer data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadInt(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteInt(System.String,System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadLong(System.String,System.Int64)">
            <summary>
                Gets the value data of an integer value as a 64-bit integer, 
                substituting a default value if it is not found.
            </summary>
            <remarks>
                <para>You can use this method to read any integer values that 
                are stored in 64 or fewer bits. For example, you can read an 
                integer (32-bit) value, and it will automatically be cast to a 
                64-bit long.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The integer data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadLong(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteLong(System.String,System.Int64)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadDouble(System.String,System.Double)">
            <summary>
                Gets the value data of a floating-point (decimal) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The floating-point data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDouble(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDouble(System.String,System.Double)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadBoolean(System.String,System.Boolean)">
            <summary>
                Gets the value data of a Boolean (true or false) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The Boolean data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadBoolean(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteBoolean(System.String,System.Boolean)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadString(System.String,System.String)">
            <summary>
                Gets the value data of a value as a string, 
                substituting a default value if it is not found.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The data read as a string, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadString(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteString(System.String,System.String)" />
            <exclude/>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.IValueReader.ReadDateTime(System.String,System.DateTime)">
            <summary>
                Gets the value data of a date/time value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The date/time data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueReader.ReadDateTime(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureClient.IPrimitiveValueAccessor.WriteDateTime(System.String,System.DateTime)" />
            <exclude/>
        </member>
        <member name="T:Emc.InputAccel.CaptureClient.Bootstrapper">
            <summary>
            This class provides assembly resolving mechanism for assemblies located in custom folders
            For example, This can be useful for loading either x86 or x64 libraries depending on a platform of running process
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureClient.Bootstrapper.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureClient.Bootstrapper.AddCustomResolveAssembly(System.String,System.String)">
            <summary>
            Add a custom directory path from where a specific assembly should be loaded
            </summary>
            <param name="assemblyName">Name of assembly (without .dll)</param>
            <param name="path">Assembly directory path, can ether relative or absolute</param>
        </member>
        <member name="T:Emc.InputAccel.CaptureFlow.NTEventType">
            <summary>
            Windows Event log event types.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.Info">
            <summary>
            Information 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.AuditSuccess">
            <summary>
            Audit success
            </summary>
        </member>
        <member name="F:Emc.InputAccel.CaptureFlow.NTEventType.AuditFailure">
            <summary>
            Audit failure
            </summary>
        </member>
        <member name="T:Emc.InputAccel.CaptureFlow.IBatchNodeData">
            <summary>
                A batch node from a workflow step.
            </summary>
            <remarks>
                <para>This interface provides access to a specific batch node. 
                You can use this interface to access node data. A batch node is 
                always accessed in the context of a specific batch step.</para>
                <para>Every node above level 0 can contain other nodes. You can 
                access nodes at lower levels by using the 
                <see cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetDescendantNodes(System.Int32)" /> 
                method.You can access batch nodes at higher levels by using the 
                <see cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetAncestor(System.Int32)" /> 
                method. You can use the 
                <see cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetStepNode(System.String)" /> 
                method to retrieve the same node in the context of a different
                step.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.BatchId">
            <summary>
                Gets the ID of the batch that contains this node.
            </summary>
            <remarks>
                <para>The batch ID is unique across all batches on the 
                workflow server.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.BatchName">
            <summary>
                Gets or sets the name of the batch that contains this node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.NodeId">
            <summary>
                Gets the ID of the node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.NodeLevel">
            <summary>
                Gets the batch level of the node.
            </summary>
            <remarks>
                <para>The level can be between 0 (page) and 7 (batch), 
                inclusive.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.BatchDescription">
            <summary>
                Gets or sets the description of the batch that contains this node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.StepName">
            <summary>
                Gets the name of the step in the CaptureFlow process.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.ProcessName">
            <summary>
                Gets the name of the process that was used to create the 
                batch.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IBatchNodeData.ProcessDescription">
            <summary>
                Gets the description of the process that was used to create the 
                batch.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetStepNode(System.String)">
            <summary>
                Changes the step context for a batch node.
            </summary>
            <remarks>
                <para>A batch node is always accessed in the context of a 
                specific batch step. The <c>GetStepNode</c> method returns the 
                same batch node with the step context changed to the requested 
                step. You must know the name of the step as defined in the 
                CaptureFlow process upon which the batch is based. An exception 
                is thrown if the <paramref name="stepName" /> parameter does not 
                match the name of any step in the batch.</para>
            </remarks>
            <param name="stepName">
                The name of the batch step to change the context to. 
                This name is case-insensitive ("SCAN" is the same as "Scan").
            </param>
            <returns>
                The batch node equivalent to the current node, with 
                the step context changed to <paramref name="stepName" />.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetAncestor(System.Int32)">
            <summary>
                Returns an ancestor of the context node.
            </summary>
            <remarks>
                <para>An ancestor is a node that contains the context node on 
                which the method is run. This can be the node's direct 
                container (parent node), the parent's container, and so forth 
                up to the root node of the batch.</para>
            </remarks>
            <param name="level">
                The level of the ancestor node to retrieve.
            </param>
            <returns>
                The requested ancestor node.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetDescendantNodes(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetDescendantNodes(System.Int32)">
            <summary>
                Returns the descendents of the context node at a specified 
                node level.
            </summary>
            <remarks>
                <para>A descendant is a node contained inside the context 
                node on which the method is run. This can be the node's direct 
                child, the child's child, and so forth down to the level 0 
                (page) nodes.</para>
                <para>When you call this method, you get an array of 
                <see cref="T:Emc.InputAccel.CaptureFlow.IBatchNodeData" /> 
                objects in the order in which they occur.</para>
                <para>If the context node has no descendant nodes at the 
                requested level, the resulting array is empty.</para>
            </remarks>
            <param name="level">
                The level at which to retrieve descendant nodes.
            </param>
            <returns>
                An array of descendant nodes at the specified level.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.GetAncestor(System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.NodeIndexFromLevel(System.Int32)">
            <summary>
                Gets the index of this node within a specified higher level.
            </summary>
            <param name="level">The level at which to count nodes. This must be at least one level higher 
            than that of this node.</param>
            <returns>The zero-based index of this node.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadInt(System.String)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The integer data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadInt(System.String,System.Int32)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteInt(System.String,System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDouble(System.String)">
            <summary>
                Gets the value data of a floating-point (decimal) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The floating-point data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDouble(System.String,System.Double)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDouble(System.String,System.Double)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBoolean(System.String)">
            <summary>
                Gets the value data of a Boolean (true or false) value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The Boolean data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBoolean(System.String,System.Boolean)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteBoolean(System.String,System.Boolean)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadString(System.String)">
            <summary>
                Gets the value data of a value as a string.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The data read as a string.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadString(System.String,System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteString(System.String,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDateTime(System.String)">
            <summary>
                Gets the value data of a date/time value.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The date/time data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDateTime(System.String,System.DateTime)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDateTime(System.String,System.DateTime)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadObject(System.String)">
            <summary>
                Gets the value data of a value as a generic object.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The data read as an object.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadInt(System.String,System.Int32)">
            <summary>
                Gets the value data of an integer value as a 32-bit integer, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The integer data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadInt(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteInt(System.String,System.Int32)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDouble(System.String,System.Double)">
            <summary>
                Gets the value data of a floating-point (decimal) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The floating-point data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDouble(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDouble(System.String,System.Double)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBoolean(System.String,System.Boolean)">
            <summary>
                Gets the value data of a Boolean (true or false) value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The Boolean data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBoolean(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteBoolean(System.String,System.Boolean)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadString(System.String,System.String)">
            <summary>
                Gets the value data of a value as a string, 
                substituting a default value if it is not found.
            </summary>
            <remarks>
                <para>You can use this method to read any values whose data 
                can be automatically converted to a string. For example, you 
                can use this method to read an integer value, but the 
                returned result will be a string representation of the 
                number.</para>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The data read as a string, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadString(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteString(System.String,System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDateTime(System.String,System.DateTime)">
            <summary>
                Gets the value data of a date/time value, 
                substituting a default value if it is not found.
            </summary>
            <param name="name">
                The name of the value to read.
            </param>
            <param name="defaultValue">
                The value to return if the requested value is not found.
            </param>
            <returns>
                The date/time data read, or the default value.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDateTime(System.String)" />
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDateTime(System.String,System.DateTime)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadUimData(System.String)">
            <summary>
                Gets an accessor for a document data object.
            </summary>
            <remarks>
                <para>Because this method can be time consuming, rather than 
                calling <c>ReadUimData</c> repeatedly, call it once and save 
                the result for later use, as shown in the following Visual Basic code:</para>
                <code>
                Dim uimData As batchNodeData.ReadUimData("UimData")
                Dim firstName As uimData.FindFieldDataContext("FirstName").ValueAsString
                Dim lastName As uimData.FindFieldDataContext("LastName").ValueAsString
                </code>
                <para>Here is the same example in Visual C#:</para>
                <code>
                IUimDataAccessor uimData = batchNodeData.ReadUimData("UimData");
                string firstName = uimData.FindFieldDataContext("FirstName").ValueAsString;
                string lastName = uimData.FindFieldDataContext("LastName").ValueAsString;
                </code>
            </remarks>
            <param name="name">
                The name of the value to read.
            </param>
            <returns>
                The document data data read.
            </returns>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteUimData(System.String,Emc.InputAccel.CaptureFlow.IUimDataAccessor)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteInt(System.String,System.Int32)">
            <summary>
                Writes a 32-bit integer value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadInt(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDouble(System.String,System.Double)">
            <summary>
                Writes a floating-point (decimal) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDouble(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteBoolean(System.String,System.Boolean)">
            <summary>
                Writes a Boolean (true or false) value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBoolean(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteString(System.String,System.String)">
            <summary>
                Writes a string value.
            </summary>
            <remarks>
                <para>If the specified value already exists but is not of 
                type "String", it is not updated. No exception is 
                thrown.</para>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadString(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteDateTime(System.String,System.DateTime)">
            <summary>
                Writes a date/time value.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="value">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadDateTime(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteUimData(System.String,Emc.InputAccel.CaptureFlow.IUimDataAccessor)">
            <summary>
                Writes a document data object.
            </summary>
            <remarks>
                <para>If the specified value does not exist, it is created as 
                a runtime value.</para>
            </remarks>
            <param name="name">
                The name of the value to write.
            </param>
            <param name="uimData">
                The data to write.
            </param>
            <seealso cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadUimData(System.String)" />
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.LogMessage(System.Int32,System.String)">
            <summary>
            Writes a message to the debug.out log file in the IAS directory of the InputAccel Server.
            </summary>
            <remarks>
                <para>The <paramref name="logFlags"/> value corresponds to the server setting FileTraceLevel
                that is used to determine which events are logged.</para>
            </remarks>
            <param name="logFlags">The bit mask that determines whether or not the InputAccel Server logs this entry.</param>
            <param name="message">The message to write to the log file.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.LogEvent(Emc.InputAccel.CaptureFlow.NTEventType,System.String)">
            <summary>
            Writes a message to the Windows event log.
            </summary>
            <param name="eventType">The type of event log entry to create.</param>
            <param name="message">The message to write to the event log.</param>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.ReadBatchProperty(System.String)">
            <summary>
            Gets the value for a batch property.
            </summary>
            <param name="name">The case-insensitive property name. See
            <see cref="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteBatchProperty(System.String,System.Object)"/>
            for the allowed names and corresponding values</param>
            <returns>The value for the property or null if a property with the given name does not exist.</returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IBatchNodeData.WriteBatchProperty(System.String,System.Object)">
            <summary>
            Sets value for a batch property.
            </summary>
            <param name="name">The case-insensitive property name.</param>
            <param name="value">The value for the property.</param>
            <returns>True if the value is written, false otherwise.</returns>
            <remarks>
                <para>The supported property names, values, and value types are as follows:</para>
                <list type="table">
                    <listheader>
                        <term>PropertyName</term>
                        <term>Allowed Values and Data Type</term>
                    </listheader>
                    <item>
                        <term>BatchHold</term>
                        <description>
                            <para>Set to 1 to hold the batch or 0 to clear the hold.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                    <item>
                        <term>BatchError</term>
                        <description>
                            <para>Set to 1 to put the batch on error or 0 to clear the error.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                    <item>
                        <term>Priority</term>
                        <description>
                            <para>Sets the value of batch priority.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.CaptureFlow.IUimDataAccessor">
            <summary>
            Represents an accessor for the data in a document data object.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimDataAccessor.DocumentName">
            <summary>
                Gets the name of the document type that is bound to this form object or 
                null if the runtime data does not have a document type.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IUimDataAccessor.GetFieldDataContextArray">
            <summary>
                Gets an array of all data fields in the document.
            </summary>
            <remarks>
                <para>An object is returned for each field in the document. Array 
                fields return one entry for each value in the array.</para>
            </remarks>
            <returns>
                An array of all data fields or an empty array if the document hs no data fields.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IUimDataAccessor.FindFieldDataContext(System.String)">
            <summary>
                Finds a data field by name.
            </summary>
            <remarks>
                <para>For array fields, the first element is returned.</para>
            </remarks>
            <param name="fieldName">
                The case-insensitive field name.
            </param>
            <returns>
                The data field or null if the field was not found.
            </returns>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IUimDataAccessor.FindArrayFieldDataContext(System.String)">
            <summary>
                Finds all data fields for by table field name. 
            </summary>
            <remarks>
                <para>If the named field is not an array field, the returned array has one entry.
                If a field data object with given name does not exist then returns empty array.</para>
            </remarks>
            <param name="fieldName">
                The case-insensitive table field name.
            </param>
            <returns>
                An array of data fields or an empty array if the field was not found.
            </returns>
        </member>
        <member name="T:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor">
            <summary>
            Represents an accessor for the data in a document data field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.Name">
            <summary>
                Gets the field name.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.Text">
            <summary>
                Gets the text value for the field.
            </summary>
            <remarks>
                <para>The field text does not necessarily match the field value. If this is a
                numeric or date/time field and OCR extracts or the user enters a value that 
                cannot be parsed according to the data type, such as entering "ABC" for a 
                numeric field, the text is that from OCR or the user but the underlying
                value is the default for the field type.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.IsArray">
            <summary>
                Gets a value indicating whether this field is an array field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ArrayIndex">
            <summary>
                Gets the zero-based index of this field in its array or 
                0 if this is not an array field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.Value">
            <summary>
                Gets the data value for the field.
            </summary>
            <remarks>
                <para>This will be the type specific default value if the text could not 
                be parsed according to the field format specification. The value may also be 
                invalid if the field has a validation error.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValueAsDouble">
            <summary>
                Gets the data value as a double.
            </summary>
            <remarks>
                <para>If the value cannot be converted an exception is thrown.
                Booleans are converted to 0 if false and 1 if true.
                DateTimes are convered to the number of days since midnight, 30 December 1899.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValueAsInt">
            <summary>
            Gets the data value as a 32-bit integer (Int32).
            </summary>
            <remarks>
                <para>If the value cannot be converted an exception is thrown.
                Booleans are converted to 0 if false and 1 if true.
                Doubles and decimals are rounded down.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValueAsString">
            <summary>
                Gets the data value as a string.
            </summary>
            <remarks>
                <para>If the value cannot be converted an exception is thrown.
                Booleans are converted to "false" or "true".</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValueAsBoolean">
            <summary>
                Gets the data value as a boolean.
            </summary>
            <remarks>
                <para>If the value cannot be converted an exception is thrown. 
                Values that can be converted are 0, 1, or "true" or "false", both 
                case-insensitive.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValueAsDate">
            <summary>
                Gets the data value as a DateTime.
            </summary>
            <remarks>
                <para>If the value cannot be converted an exception is thrown.
                Only dates and times in string format can be converted.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.IsValid">
            <summary>
                Gets a value indicating whether the field value is valid.
            </summary>
            <remarks>
                <para>The field value is valid if it has neither field errors nor 
                validation rule errors.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.ValidationError">
            <summary>
                Gets the validation exception for the field or null if the field 
                has no error.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.FlaggedReason">
            <summary>
                Gets or sets the flag text for the field or an empty string if the 
                field is not flagged.
            </summary>
            <remarks>
                <para>The flag value should be set to one or more of the 
                preconfigured values for the step separated by commas.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.CaptureFlow.IUimFieldDataAccessor.SetValue(System.Object)">
            <summary>
                Sets the data value, updating the text shown in UI.
            </summary>
            <remarks>
                <para>When the field value is set, the new value is formatted and stored as
                the field text.</para>
                <para>Validation rules for the field are never reevaluated when the field value
                is changed in CaptureFlow scripting, regardless of whether or not
                the new value is different than the current value.</para>
                <para>If <paramref name="value"/> has a different data type than the field, the 
                value is converted to the field's data type. If the conversion fails, the 
                field value and text are both set to the default for the field's data type.</para>
            </remarks>
            <param name="value">
                The new field value.
            </param>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.ImageData">
            <summary>
            Represents image data used by image processing filters.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.ImageData.DataStream">
            <summary>
            Gets the image data stream.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageData.FromByteData(System.Byte[])">
            <summary>
            Creates a new <c>ImageData</c> from an array of bytes that represents an image.
            </summary>
            <param name="data">The byte data for the image.</param>
            <returns>The new ImageData object.</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageData.ReadAllBytes">
            <summary>
            Reads the image data as an array of bytes.
            </summary>
            <returns>A byte array containing the image data.</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageData.Dispose">
            <summary>
            Releases resources used by the image.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.ImageData.MemoryImageData">
            <summary>
            Inner class for memory data based image data.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.ImageData.MemoryImageData.DataStream">
            <summary>
            Data
            </summary>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageData.MemoryImageData.ReadAllBytes">
            <summary>
            Read all bytes
            </summary>
            <returns>Byte data</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageData.MemoryImageData.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.ImageFilter">
            <summary>
            Represents an image processing filter.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.ImageFilter.Name">
            <summary>
            Gets the programmatic name of the filter
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.ImageFilter.DisplayName">
            <summary>
            Gets the display name of the filter
            </summary>
            <remarks>
            <para>The display name for all standard filters is localized.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.ImageFilter.MultiThreadAccessAllowed">
            <summary>
            Gets a value indicating whether the filter can be used from multiple threads.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageFilter.ApplyFilter(Emc.InputAccel.ImageFilter.IFilterConfiguration,Emc.InputAccel.ImageFilter.ImageData,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Applies the filter to an image.
            </summary>
            <param name="configuration">The configuration for the filter.</param>
            <param name="imageData">The input image onto which filters are applied.</param>
            <param name="outValues">A collection of named values returned by the method.</param>
            <returns>Output image data stream.</returns>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.CustomFilterProperty">
            <summary>
            Represents a single image processing filter configuration property.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.CustomFilterProperty.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the CustomFilterProperty class.
            </summary>
            <param name="displayName">The name of the property that is shown to users configuring the filter.</param>
            <param name="description">The description of the property.</param>
            <param name="dataTypeName">The type of the property. 
            For the list of valid types, see <see cref="P:Emc.InputAccel.ImageFilter.CustomFilterProperty.DataTypeName"/>.</param>
            <param name="choiceList">A comma-separated list of choices for "choice" properties. If dataTypeName is "integer"
            or "double", the list must contain comma separated minimum and maximum values. Sample: "0,100"
            The value is ignored for other property types.</param>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.CustomFilterProperty.Description">
            <summary>
            Gets the description of the property that is shown to users configuring the filter.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.CustomFilterProperty.DisplayName">
            <summary>
            Gets the name of the property that is shown to users configuring the filter.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.CustomFilterProperty.DataTypeName">
            <summary>
            Gets the type of the data the property represents.
            </summary>
            <remarks>
            <para>Valid values are "integer", "double", "color", "rectangle", and "choice".</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.ImageFilter.CustomFilterProperty.ChoiceList">
            <summary>
            Gets the choices for a "choice" property as a comma-delimited string.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.ImageFilterFactory">
            <summary>
            Provides support for accessing filters in a custom assembly.
            </summary>
            <remarks>
            If a .NET assembly provides one or more image filters, then the assembly
            must contain a public class that extends <c>ImageFilterFactory</c> with
            a public, parameterless constructor. The first such class is used to 
            create image filters.
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageFilterFactory.Create">
            <summary>
            Creates an array of the image filters implemented in the assembly.
            </summary>
            <returns>An array of filters, one per type provided by the assembly.</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.ImageFilterFactory.ApplyFilterSequence(Emc.InputAccel.ImageFilter.ImageFilter[],Emc.InputAccel.ImageFilter.IFilterConfiguration[],Emc.InputAccel.ImageFilter.ImageData,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Applies a sequence of filters to an image.
            </summary>
            <remarks>
            <para>This method can be overridden to optimize how multiple filters are
            applied to an image. For example, if two consecutive filters can be combined
            in a single pass over the image that may be more efficient than processing
            each filter separately. All filters passed to this method are guaranteed
            to be defined in this assembly.</para>
            <para>Filter creators are not required to override this method.
            The default implementation applies the filters one at a time.</para>
            </remarks>
            <param name="filters">The array of filters to be applied.</param>
            <param name="configurations">The array of filter configurations in the same order
            as the filter array.</param>
            <param name="imageData">The input image onto which filters are applied.</param>
            <param name="outValues">A collection of named values returned by the method.</param>
            <returns>The modified image after filters have been applied.</returns>
        </member>
        <member name="T:Emc.InputAccel.ImageFilter.IFilterConfiguration">
            <summary>
            Represents the run-time configuration of a filter.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.IFilterConfiguration.GetValue(System.String)">
            <summary>
            Get the value for the specified property
            </summary>
            <remarks>
            <para>The return value for "rectangle" properties have the format "X,Y,Width,Height".</para>
            <para>To use "color" properties, pass the returned value to
            <see cref="M:System.Windows.Media.ColorConverter.ConvertFromString(System.String)"/> to generate a 
            <see cref="T:System.Windows.Media.Color"/> from the string.</para>
            </remarks>
            <param name="propertyName">The case-sensitive name of the property to get.</param>
            <returns>The value associated with the specified property.</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.IFilterConfiguration.GetProperties">
            <summary>
            Gets the names of the properties contained in the configuration.
            </summary>
            <returns>A string array containing the property names.</returns>
        </member>
        <member name="M:Emc.InputAccel.ImageFilter.IFilterConfiguration.ContainsProperty(System.String)">
            <summary>
            Determines whether the configuration contains the specified property.
            </summary>
            <param name="propertyName">The case-sensitive name of the property to test</param>
            <returns>true if the property is supported; false otherwise.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IRecognitionProject">
            <summary>
            Represents a recognition project and the templates that it contains. (Added in 7.5)
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IRecognitionProject.GetAllTemplates">
            <summary>
            Gets a read-only list of all templates defined in this recognition project.
            </summary>
            <returns>A list of templates</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IRecognitionProject.GetTemplatesForDocumentType(System.String)">
            <summary>
            Gets a read-only list of all templates defined in this recognition project for a given document type.
            </summary>
            <param name="documentType">The document type whose templates are to be returned.</param>
            <returns>A list of templates. If the document type is invalid or has no templates, the returned list is empty.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.LccBatchProperty">
            <summary>
            Batch property
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchId">
            <summary>
            Batch Id
            Type: int
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchName">
            <summary>
            Batch name. 
            Type: string
            Readonly.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.CreateTime">
            <summary>
            Create time as UTC date.
            Type: DateTime.
            Readonly.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.CreatedBy">
            <summary>
            Batch creater user name.
            Type: string.
            Readonly.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.ProcessName">
            <summary>
            Process flow name.
            Type: string.
            Readonly.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchTag1">
            <summary>
            Optional Batch tag value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchTag2">
            <summary>
            Optional Batch tag value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchTag3">
            <summary>
            Optional Batch tag value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.BatchTag4">
            <summary>
            Optional Batch tag value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.Custom1">
            <summary>
            Optional Batch value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.Custom2">
            <summary>
            Optional Batch value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.Custom3">
            <summary>
            Optional Batch value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.Custom4">
            <summary>
            Optional Batch value.
            Type: string.
            Read/Write
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.StepName">
            <summary>
            Current step name.
            Type: string.
            Readonly
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.OperatorTimeSeconds">
            <summary>
            Total operator time spent so far on this batch.
            Type: int
            Readonly
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchProperty.Comment">
            <summary>
            Comment to be added to batch.
            Type: string
            Write only. Read returns empty string.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.LccBatchNodeImageProperty">
            <summary>
            Image propety
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchNodeImageProperty.RawImage">
            <summary>
            Scanned image as output of scan step or import step. Image of record.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchNodeImageProperty.WorkingImage">
            <summary>
            Image after backend image enhancements, annotations etc.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LccBatchNodeImageProperty.DataFile">
            <summary>
            Optional data file.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.NodeStructureChangeKind">
            <summary>
            Enumeration for node structure changes. A node structure change occurs
            in the context of a reference node. It uses a child node id and an 
            optional anchor node id.
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.None">
            <summary>
            No change
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.NewChild">
            <summary>
            Add new child to reference node. 
            Child - none. 
            Anchor - none.
            Result - new node id created.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.DeleteChild">
            <summary>
            Delete existing child from reference node. 
            Child - child node id.
            Anchor - none.
            Result - deleted child node id. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.MoveAsChildNode">
            <summary>
            Move the given node as a child to this node. Place it to the left of
            anchor node. If anchor node is 0, then place it at end.
            Child - node to move. Could be parented by some other node or this node.
            Must have appropriate level.
            Anchor - Anchor child node. New position is to left of this anchor. 
            If anchor is 0 then new position is the last position.
            Result - Moved child id.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.SplitAtChild">
            <summary>
            Split the node at given child node's left edge. A new right sibling 
            node is created and the given child node and all nodes to the right of 
            it are disconnected from parent and appended to the newly created 
            sibling node.
            Child - node at which the split occurs along left edge.
            Anchor - none.
            result - new right sibling node id.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeStructureChangeKind.MergeChildWithLeftSibling">
            <summary>
            Merge child node with left sibling. Children of the child node are appended 
            to its left sibling and the child node is dropped. 
            If left sibling does not exist, no change occurs.
            Child - child node which is merged with its left sibling.
            Anchor - none.
            Result - merged child id.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IFileDataResult">
            <summary>
            Represents file data.
            </summary>
            <exclude />
        </member>
        <member name="P:Emc.InputAccel.UimScript.IFileDataResult.Name">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IFileDataResult.Extension">
            <summary>
            File extension without period
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IFileDataResult.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.ILccBatch">
            <summary>
            This interface represents LccBatch accessed by scripts.
            </summary>
            <exclude />
        </member>
        <member name="P:Emc.InputAccel.UimScript.ILccBatch.RootNodeId">
            <summary>
            Root node id
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.ReadBatchProperty(Emc.InputAccel.UimScript.LccBatchProperty)">
            <summary>
            Returns the batch property.
            </summary>
            <param name="property">Property to read.</param>
            <returns>Batch property value.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.WriteBatchProperty(Emc.InputAccel.UimScript.LccBatchProperty,System.String)">
            <summary>
            Write a batch property. Most batch properties are readonly. Any
            write to these properties is ignored.
            </summary>
            <param name="property">Property to write.</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.GetNodeUimData(System.Int32,System.Boolean)">
            <summary>
            Reads Uim Data property of the node. Caller may modify the data.
            </summary>
            <param name="nodeId">Node id.</param>
            <param name="forWrite">Marks the data as dirty. When task is saved, this
            is written back.</param>
            <returns>Uim Data object.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.SetNodeUimData(System.Int32,Emc.InputAccel.UimScript.IUimDataContext)">
            <summary>
            Replace UimData.
            </summary>
            <param name="nodeId">Node id.</param>
            <param name="data">new data to set.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.GetIAValueSet(System.Int32,System.Boolean)">
            <summary>
            Returns IA Value set.
            </summary>
            <param name="nodeId">Node id</param>
            <param name="forWrite">If true, write is allowed.</param>
            <returns>Values</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.ReadNodeImageData(System.Int32,Emc.InputAccel.UimScript.LccBatchNodeImageProperty)">
            <summary>
            Reads image data property as byte array. If the image is not present, an
            empty array is returned.
            </summary>
            <param name="nodeId">Node id.</param>
            <param name="imageProperty">Image property type.</param>
            <returns>Image data .</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.WriteNodeImageData(System.Int32,Emc.InputAccel.UimScript.LccBatchNodeImageProperty,System.Byte[],System.String)">
            <summary>
            Modifies image data.
            </summary>
            <param name="nodeId">Node id.</param>
            <param name="imageProperty">Image property type.</param>
            <param name="data">Data to write.</param>
            <param name="extension">File extension that indicates type of image or data file.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.GetNodeLevel(System.Int32)">
            <summary>
            Returns the node level for given node. This is between 0 and BatchLevel.
            </summary>
            <param name="nodeId">Node id.</param>
            <returns>Node level.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.BrowseNodes(System.Int32,System.Int32)">
            <summary>
            Returns the ancestor or descendant node id values in the tree for the
            given level. 
            </summary>
            <param name="nodeId">Reference node id.</param>
            <param name="level">0 based browse level. If lower than the level
            of reference node id then descendants are returned.
            If higher then ancestors are returned.
            If same then reference node id is returned.</param>
            <returns>Array of node id values. If level is higher then, a single
            ancestor node is returned. If level same then reference node is 
            returned. If level is lower, zero or more descendant nodes are
            returned.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ILccBatch.ApplyNodeStructureChange(System.Int32,Emc.InputAccel.UimScript.NodeStructureChangeKind,System.Int32,System.Int32)">
            <summary>
            Applies structure change to the node tree.
            </summary>
            <param name="referenceNodeId">Reference node id. Must be valid.</param>
            <param name="changeKind">Structure change type.</param>
            <param name="childNodeId">Optional child node id.</param>
            <param name="anchorNodeId">Optional anchor node id.</param>
            <returns>Resulting node id.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.NodeBreakKind">
            <summary>
            Types of nodes that a list item represents. (Added in 7.5)
            </summary>
            <seealso cref="T:Emc.InputAccel.UimScript.IImportNodeItem"/>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.Skip">
            <summary>
            Skip the item and never process it in the future.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.Ignore">
            <summary>
                <para>Ignore the item for this batch. The item will be reconsidered for the next batch.</para>
                <para>The value is only used for file system profiles other than those with the 
                assembly method "Batch Per Subfolder". Items marked <c>Ignore</c> in an email profile
                or a "Batch Per Subfolder" file system profile are treated the same as
                <c>Skip</c>.</para>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.Page">
            <summary>
            The item is a Page (Level 0) node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.Document">
            <summary>
            The item is a Document (Level 1) node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.Folder">
            <summary>
            The item is a Folder (Level 2) node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.L3">
            <summary>
            The item is a Level 3 node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.L4">
            <summary>
            The item is a Level 4 node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.L5">
            <summary>
            The item is a Level 5 node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.NodeBreakKind.L6">
            <summary>
            The item is a Level 6 node.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext">
            <summary>
            Represents the run-time context of the batch-creation module. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.ProfileName">
            <summary>
            Gets the name of the import profile.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.Category">
            <summary>
            Gets the type of the import profile, one of "EMAIL" or "FILE"
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.InstanceId">
            <summary>
            Gets the unique instance ID of the profile thread for diagnostic purposes.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.Configuration">
            <summary>
            Gets the configuration of the import profile.
            </summary>
            <remarks>
                <para>Values returned by this property may be different from those used by the module.
                The run-time validates and adjusts all values to fall into acceptable ranges.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.ReadCycleDataValue(System.String)">
            <summary>
            Returns a cycle data value by name.
            </summary>
            <param name="valueName">The name of the value. See the Remarks for more details.</param>
            <returns>The cycle data value</returns>
            <remarks>
                <para>When cycle data is accessed during poll, the data belongs to the last completed cycle. 
                When it is accessed during batch list processing, it belongs to the current cycle.</para>
                <para>The cycle value name must be one of the following:</para>
                <list type="table">
                    <listheader>
                        <term>Value Name</term>
                        <description>Returned Value and Data Type</description>
                    </listheader>
                    <item>
                        <term>CycleStartTime</term>
                        <description>
                            <para>The local time on the server when the cycle started.</para>
                            <para><c>DateTime</c></para>
                        </description>
                    </item>
                    <item>
                        <term>CycleStartAgeSeconds</term>
                        <description>
                            <para>The number of seconds elapsed since the cycle started.</para>
                            <para><c>double</c></para>
                        </description>
                    </item>
                    <item>
                        <term>CycleNumber</term>
                        <description>
                            <para>The number of the cycle. The first cycle reutrns 0 and each subsequent cycle
                            adds 1 to the value.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                    <item>
                        <term>CycleSuccess</term>
                        <description>
                            <para>An indicator of whether the cycle succeeded.</para>
                            <para><c>bool</c></para>
                        </description>
                    </item>
                    <item>
                        <term>CycleBatchesCreated</term>
                        <description>
                            <para>The number of batches created during the cycle.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                    <item>
                        <term>TotalBatchesCreated</term>
                        <description>
                            <para>The total number of batches created during the lifetime of this 
                            service instance.</para>
                            <para><c>int</c></para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext.Trace(System.String)">
            <summary>
                Writes a message to the module trace log.
            </summary>
            <remarks>
                <para>For an example, see
                <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.String,System.Object[])"/>.</para>
            </remarks>
            <param name="message">
                The message to write to the trace log.
            </param>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext">
            <summary>
            Represents the run-time context of batch creation. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.ListId">
            <summary>
            Gets the unique list ID that identifies the current selection of files for batch creation. 
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.RootDataValues">
            <summary>
            Gets an object that can be used to read and write values for the batch root node.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.SetBatchName(System.String)">
            <summary>
            Sets the name that will be used for the new batch.
            </summary>
            <param name="batchName">The name of the new batch</param>
            <remarks>
                <para>The caller is responsible for ensuring that batch names are not null and are unique.
                Otherwise batch creation will fail.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.SetBatchPriority(System.Int32)">
            <summary>
            Sets the priority for the new batch.
            </summary>
            <param name="priority">The priority for the new batch. The value must be between 0 and 100.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.CreateNewNode(Emc.InputAccel.UimScript.NodeBreakKind)">
            <summary>
            Creates an empty node. 
            </summary>
            <param name="nodeKind">The type the new node.</param>
            <returns>The newly-created node</returns>
            <remarks>
                <para>After creating the node, files and values can be added to it if needed.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IImportNodeItem">
            <summary>
            Represents one node item in batch-creation processing. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.NodeBreak">
            <summary>
            Gets or sets the type of node for the item.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <remarks>
                <para>For file system profiles, this is the name of the file including its extension. For 
                email profiles, it is the name of the attachment, if any, including its extension.</para>
                <para>The file name without the extension is copied to the IA Value <c>FileName</c>. The 
                extension is copied to IA Value <c>OutputFileType</c>.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.FileLastWriteUtcTime">
            <summary>
            Gets the UTC date and time when the file was updated last.
            </summary>
            <remarks>
                <para>If there is no file associated with this node returns a date value with 
                the year set to 1970.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.NodePath">
            <summary>
            Gets the directory the file was found in for file system profiles.
            </summary>
            <remarks>
                <para>The path is always relative to the watch root and does not include the name. The path
                tokens are separated by foward slash. For items in the watch root, this is empty.
                The returned node path is always lower case.</para>
                <para>For email profiles, the value is always empty.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.DataValues">
            <summary>
            Gets an object that can be used to read and write node values.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IImportNodeItem.HasImage">
            <summary>
            Gets a value indicating whether the node has image data.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IImportNodeItem.ClearDataValues">
            <summary>
            Removes all data values from the node.
            </summary>
            <remarks>
                <para>After calling this method, the value returned by any previous read of
                <see cref="P:Emc.InputAccel.UimScript.IImportNodeItem.DataValues" /> is invalid and
                cannot be used. The property must be read again to get the new value accessor.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IImportNodeItem.CreateImage(System.Byte[],System.String)">
            <summary>
            Creates an image for a node.
            </summary>
            <param name="data">The data for the file</param>
            <param name="fileName">The file name including its extension. This is stored in the 
            <see cref="P:Emc.InputAccel.UimScript.IImportNodeItem.Name"/> property.</param>
            <remarks>
                <para>Images can only be created for nodes that have no image. This method will throw an
                exception if the node already contains an image. Images on a node cannot be replaced; instead,
                create a new node and replace the current one with it.</para>
                <para>The image file is created in the "$NewFiles" output directory using a unique name.
                The name associated with the node and in the batch, however, is that supplied to the method.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IImportNodeItem.ReadImage">
            <summary>
            Gets the image data for the node.
            </summary>
            <returns>The image data or null if the node has no image</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IImportNodeItem.CloneNode">
            <summary>
            Clones this node including its image and data values.
            </summary>
            <returns>The cloned node</returns>
            <remarks>
                <para>This API can be used to make multiple copies of an image at different locations
                in the batch. For example, each document might need its own copy of a common header page.
                To create a node without any image or data, use 
                <see cref="M:Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext.CreateNewNode(Emc.InputAccel.UimScript.NodeBreakKind)"/>.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.UimScript.LocaleChangeAction">
            <summary>
            Actions that the method 
            <see cref="M:Emc.InputAccel.UimScript.IUimDataContext.SetLocale(System.String,Emc.InputAccel.UimScript.LocaleChangeAction)"/>
            can take when changing the locale of a document.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LocaleChangeAction.ChangeLocaleAndParse">
            <summary>
            <para>Change the locale and then recreate the value for each field by reparsing that
            field text using the new locale. If the field text is invalid for the data
            type, such as when a numeric field has the text "ABC", the field value is replaced
            by the default value for the data type. If the field text is valid, the newly-parsed
            value is reformatted according to the field configuration and the text is replaced
            with the reformatted value.</para>
            <para>If the field text before the locale change is empty, the field is not changed.
            The field text remains blank and the field value remains the default value.</para>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LocaleChangeAction.ChangeLocaleAndFormat">
            <summary>
            <para>Change the locale and then recreate the text for each field by reformatting that
            field's value using the specified locale. If the field text is invalid for the data
            type, such as when a numeric field has the text "ABC", the field text is replaced
            by the formatted default value for the data type.</para>
            <para>If the field text before the locale change is empty, the field is not changed.
            The field text remains blank and the field value remains the default value.</para>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LocaleChangeAction.ChangeLocaleOnly">
            <summary>
            <para>Change the locale without updating either the text or value for any field in
            the document.</para>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LocaleChangeAction.ChangeLocaleParseUnchangedFormatChanged">
            <summary>
            <para>Change the locale and then process each field as follows.</para>
            <para>If the field value has never been changed from the OCR value and the OCR text is
            not empty, the text is first parsed and if the parse succeeds, the parsed value is 
            reformatted according to the field configuration.</para>
            <para>If the field value has been changed from the OCR value and the OCR text is
            not empty, the value is reformatted according to the field configuration.</para>
            <para>If the field text before the locale change is empty, the field is not changed.
            The field text remains blank and the field value remains the default value.</para>
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.CloseReasonCode">
            <summary>
            Reasons that a task or document is being closed. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.CloseReasonCode.Finish">
            <summary>
            Closed with a request to save the data and mark the task as complete.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.CloseReasonCode.Abandon">
            <summary>
            Closed with a request to abandon the data and leave the task open for later processing.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.CloseReasonCode.SaveAndCancel">
            <summary>
            Closed with a request to save the data but leave the task open for later processing.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.ExitControlReasonCode">
            <summary>
            Reasons that the focus is leaving a form control. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.ExitControlReasonCode.Unknown">
            <summary>
            The field was exited by a means other than the Enter or Tab key. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.ExitControlReasonCode.Enter">
            <summary>
            The Enter key was pressed. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.ExitControlReasonCode.Tab">
            <summary>
            The Tab key was pressed. 
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.TaskFinishAction">
            <summary>
            Script responses to the users request to finish the task.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.TaskFinishAction.Finish">
            <summary>
            The task finishes as the user requested.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.TaskFinishAction.AbortFinish">
            <summary>
            The task does not finish.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.DocumentEventKind">
            <summary>
            Document script event kinds.
            </summary>
            <remarks>
                <para>The execution order for non-UI tasks is as follows.</para>
                <list type="number">
                <item><description>DocumentExtracted</description></item>
                <item><description>ExecuteValidationRule, once for each validation rule</description></item>
                <item><description>DocumentUnload</description></item>
                </list>
                <para>When a data entry form is launched the
                runtime generates both document data events and form UI control
                events. The execution order for UI tasks is as follows.</para>
                <list type="number">
                <item><description>DocumentLoad</description></item>
                <item><description>ExecuteValidationRule, once for each validation rule 
                after DocumentLoad and when any field used by the rule has changed</description></item>
                <item><description>FormLoad</description></item>
                <item><description>Enter, Exit, ButtonClick, SelectionChange, and ConfirmControl as 
                UI flow causes these events</description></item>
                <item><description>DocumentUnload</description></item>
                </list>
                <para>This enumeration is not used in CaptureFlow scripting or by the .NET Code module.</para>
            </remarks>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.DocumentLoad">
            <summary>
            Document instance for a given UI task is loaded.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.DocumentExtracted">
            <summary>
            Document instance for a given non-UI task is loaded.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.DocumentUnload">
            <summary>
            Task has ended and document instance is finalized. 
            Data changed during this event is not validated.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ExecuteValidationRule">
            <summary>
            Document-level validation rule is executed.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ExecuteTableRowValidationRule">
            <summary>
            Row-level validation rule is executed.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.FormLoad">
            <summary>
            Data entry form is loaded.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.EnterControl">
            <summary>
            UI control is entered, gaining focus. 
            This event is fired for:
            <list type="bullet">
            <item><description>text boxes</description></item>
            <item><description>list boxes</description></item>
            <item><description>drop-down list boxes</description></item>
            <item><description>checkboxes</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ExitControl">
            <summary>
            UI control is exited, losing focus.
            This event is fired for:
            <list type="bullet">
            <item><description>text boxes</description></item>
            <item><description>list boxes</description></item>
            <item><description>drop-down list boxes</description></item>
            <item><description>checkboxes</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ButtonClick">
            <summary>
            Command button on the form is clicked.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.SelectionChange">
            <summary>
            List box or drop-down list box selection is changed.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.TextChanged">
            <summary>
            Text box text is changed. The event is fired immediately after any
            change to the text, even if the field is still in focus.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ConfirmControl">
            <summary>
            User has confirmed field contents.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.InsertRow">
            <summary>
            A new table row has been inserted.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.DeleteRow">
            <summary>
            A table row is about to be deleted. Changes to the row will be lost.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.RemoveAllRows">
            <summary>
            All table rows are about to be deleted. The DeleteRow event is not 
            fired for each row when all rows are removed as a single operation.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.MoveRow">
            <summary>
            Fired after one or more rows has been moved to a different position.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.TableExtracted">
            <summary>
            A table extraction has been performed.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.MergeRows">
            <summary>
            Fired after two rows has been merged into one row.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.TableStructureChanged">
            <summary>
            Table structure changed. This event is fired after all pre- and post-row change events, if any.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.DocumentClosing">
            <summary>
            Called when a document edit is complete and Just before document data is 
            transferred to backend. User gets an opportunity to change document
            contents and or move document contents to external resources.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ExecutePopulationRule">
            <summary>
            Execute index field(s) data population rule.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.DocumentEventKind.ExecuteTableRowPopulationRule">
            <summary>
            Row-level population rule is executed.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.LowConfidenceCharacters">
            <summary>
            Options for how question mark ("?") characters are handled when field values are replaced in scripting.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LowConfidenceCharacters.Mark">
            <summary>
            Mark all "?" in the new <see cref="P:Emc.InputAccel.UimScript.IUimFieldDataContext.Text"/> value as needing character repair,
            regardless of what the original value was or if it had any low-confidence characters.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LowConfidenceCharacters.Clear">
            <summary>
            Treat all the characters in the new value as good, clearing the list of characters to repair.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.LowConfidenceCharacters.KeepPositions">
            <summary>
            Do not change the list of low-confidence character positions, even if the original string changes.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimTemplate">
            <summary>
            Represents a recognition template. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.Name">
            <summary>
            Gets the name of the template.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.Id">
            <summary>
            Gets the ID of the template.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.Code">
            <summary>
            Gets the code of the template.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.DocumentType">
            <summary>
            Gets the name of the document type associated with this template.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.IsDocSeparator">
            <summary>
            Gets a value that indicates whether the template is a document separator.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTemplate.IsGeneric">
            <summary>
            Gets a value that indicates whether the template is a Generic template.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimNodeData">
            <summary>
            Represents a batch node.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting or by the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.Level">
            <summary>
            Gets the level this node represents (0 = page, 1 = document, etc.).
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.NodeId">
            <summary>
            Gets the ID of this node.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.BatchId">
            <summary>
            Gets the ID of this batch.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.ChildrenCount">
            <summary>
            Gets the number of child nodes. (Added in 7.5)
            </summary>
            <remarks>
                <para>During the <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>,
                event when the reason is <see cref="F:Emc.InputAccel.UimScript.GlobalEventReason.NodeMerged"/>, 
                this property returns 0 as the children have already been deleted.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.TaskValues">
            <summary>
            Gets the task-level values dictionary for custom, external data handling.
            </summary>
            <remarks>
            Until the task is closed, the script controls the contents of this dictionary and can
            add, change, or remove values. When the task is closed, any items 
            in the dictionary will be sent to the platform for updating, the details of
            which are platform-specific. As the dictionary is not supported by all platforms, 
            it may be null and applications must test for this before trying to set values.
            <para>
            For the InputAccel platform, these values are written as dynamic InputAccel
            nodal values of the task node. For example, if the task is at level 2 (folder) and the
            script created a TaskValues key "TotalCount" with the value "100", then on exit a dynamic
            value with name "TotalCount" and string value "100" is created at level 2. InputAccel
            can only create strings as dynamic values. If the task
            value is not a string, the value is converted to a string
            and the format is not deterministic. Therefore, script
            authors should provide appropriately-formatted strings for all values. 
            Dynamic values are not created for entries with null values.
            </para>
            <para>
            For platforms other than InputAccel, any data type supported by the platform may be used
            to pass values. The value name must follow platform-specific name syntax.
            </para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.Parent">
            <summary>
            Gets the parent node of the current node or null if the current node is the task node. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.IndexInParent">
            <summary>
            Gets the index of the current node in its parent or 0 if the current node is the task node. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimNodeData.ValueSet">
            <summary>
            Gets an object that can be used to read and write node values. (Added in 7.5)
            </summary>
            <remarks>
                <para>This property enables direct access to IA values in the batch at or below the task
                level. This can be used in cases where values cannot be automatically merged into the
                document data using the <c>UimDataImportMode</c> MDF value.</para>
                <note type="caution">
                    <para>Excessive reading and writing of IA values may negatively impact module performance
                    due to network activity. When possible, use the more efficient 
                    <see cref="P:Emc.InputAccel.UimScript.UimScriptTask.StepCustomValue"/> for inputs and 
                    <see cref="P:Emc.InputAccel.UimScript.UimScriptTask.TaskValues"/> for outputs instead.</para>
                </note>
                <para>The property returns <c>null</c> if it is read during the
                <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                event as the node has already been deleted.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.GetChildren">
            <summary>
            Gets the list of child nodes that belong to this node. (Added in 7.5)
            </summary>
            <remarks>
                <para>During the <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>,
                event when the reason is <see cref="F:Emc.InputAccel.UimScript.GlobalEventReason.NodeMerged"/>, 
                this property returns an empty array as the children have already been deleted.</para>
            </remarks>
            <returns>An array of nodes. The array is empty if this method is called on a page node.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.GetPages">
            <summary>
            Gets the pages below the node. (Added in 7.5)
            </summary>
            <remarks>
                <para>This method returns an empty array under the following conditions:</para>
                <list type="bullet">
                    <item>When called during the <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>,
                    event when the reason is <see cref="F:Emc.InputAccel.UimScript.GlobalEventReason.NodeMerged"/>. 
                    In this case, the pages have already been deleted.</item>
                    <item><para>When called from the Extraction module.</para></item>
                    <item><para>When called on a page node.</para></item>
                </list>
                <para></para>
            </remarks>
            <returns>An array of pages. The array may be empty; see the Remarks for details.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.GetPageData">
            <summary>
            Gets the document objects that belong to page-level children of this node. (Added in 7.5.)
            </summary>
            <remarks>
                <para>The contents of the returned array depend on the module and level of this node.</para>
                <para>In the Identification module, one document object is created for each level 0 node (each 
                page); the object contains only the pre-indexing fields for that page. The return value varies 
                with the node level as follows.</para>
                <list type="bullet">
                    <item><description>If this node is a page, the returned array contains one object for 
                    the page.</description></item>
                    <item><description>If this node is a document or higher, the array contains one object for 
                    each page under that node in the order they appear in the batch.</description></item>
                </list>
                <para>In all other modules, the array is empty.</para>
            </remarks>
            <returns>An array of document data objects.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.GetDocuments">
            <summary>
            Gets the document objects that belong to this node and its level 1 children.
            </summary>
            <remarks>
                <para>The contents of the returned array depend on the level of this node as follows.</para>
                <list type="bullet">
                    <item><description>If this node is a page, the returned array is empty.</description></item>
                    <item><description>If this node is a document, the array contains the document as its 
                    only entry.</description></item>
                    <item><description>If this node is a folder or higher, the array contains all documents under 
                    that node in the order they appear in the batch.</description></item>
                </list>
            </remarks>
            <returns>An array of document data objects.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.SetDocumentType(System.String)">
            <summary>
            Set the new document type, if the node is document level.
            </summary>
            <remarks>
                <para>This API is not supported by Identificaiton or Extraction and will do nothing
                when called in either of those modules.</para>
                <para>The result of the function depends on the level of this node as follows.</para>
                <list type="bullet">
                    <item><description>If this node is a document, the document type is updated.</description></item>
                    <item><description>If this node is any other level, nothing happens.</description></item>
                </list>
                <para>The method throws an <see cref="T:System.ArgumentNullException"/> if the supplied
                document type name is an empty string or <c>null</c>. It throws an
                <see cref="T:System.ArgumentException"/> if the supplied document type is not found.</para>
                <para>The method does nothing when called during the
                <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                event as the node has already been deleted and cannot be changed.</para>
            </remarks>
            <param name="documentType">Name of the new document type</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimNodeData.GetDocStatus(System.String)">
            <summary>
            Gets the a document status flagged count.
            </summary>
            <remarks>
                <para>Supported document status flags</para>
                <list type="bullet">
                    <item>DocumentFlagged</item>
                    <item>FieldsCompleted</item>
                    <item>FieldsFlagged</item>
                    <item>FieldsInvalid</item>
                    <item>FieldsNeedingDocWork</item>
                    <item>FieldsTotal</item>
                    <item>FieldsUnconfirmed</item>
                    <item>PagesFlagged</item>
                    <item>QuestionableCharacters</item>
                </list>
            </remarks>
            <param name="flag">Supported document status flag.</param>
            <returns>An the count for the request document status flag.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimPageContext">
            <summary>
            Represents a page in a document. (Added in 7.5)
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimPageContext.Template">
            <summary>
            Gets the recognition template for this page, returning null if the page has no template.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimPageContext.FlaggedReason">
            <summary>
            Gets or sets the flag text for the page or an empty string if the page is not flagged.
            </summary>
            <remarks>
                <para>The flag value should be set to one or more of the preconfigured values for 
                the step separated by commas.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimFormControlContext">
            <summary>
            Represents a UI control on the data entry form.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting or by the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.ControlName">
            <summary>
            Gets the name of the control.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.ParentForm">
            <summary>
            Gets the form that contains this control.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.FieldDataContext">
            <summary>
            Gets the data field that is bound to this control.
            </summary>
            <remarks>
                <para>The data field is returned for both the label and control of the data field.
                Other UI-only controls return null.</para>
                <para>If the control represents a field in the placeholder row of a table,
                this property returns null.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.FormSection">
            <summary>
            Gets the form section that contains this control.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.TableRowIndex">
            <summary>
            Gets the zero-based row index of this control if it is part of tabular section row, 0 otherwise.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.Text">
            <summary>
            Gets the text in the control.
            </summary>
            <remarks>
            The control text may not be same as field data value if the
            control had been updated but not committed yet. This is the text string
            shown to user.
            If the control is a checkbox, this is either "true" or "false".
            If the control is a list box, this is the displayed text of the selected item. 
            If the control is a drop-down list box, this is that shown in the drop-down list box.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.ChoiceValue">
            <summary>
            Gets the text of the selected choice for a choice-based control</summary>
            <remarks>
            If the control is not associated with choices then this is same as
            <see cref="P:Emc.InputAccel.UimScript.IUimFormControlContext.Text"/> property.
            If the control is a list box or drop-down list box, this is the selected
            choice value.
            If the control is a checkbox, this is the first entry in choices 
            if the checkbox is checked and the second entry if it is unchecked.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.IsHidden">
            <summary>
            Gets a value indicating whether the form control is hidden.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.IsEnabled">
            <summary>
            Gets a value indicating whether the form control is enabled.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.IsReadOnly">
            <summary>
            Gets a value indicating whether the form control is read-only.
            </summary>
            <remarks>
                <para>Controls other than text boxes are considered read-only any
                time the control is disabled and are not read-only otherwise.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.CustomValue">
            <summary>
            Gets the custom string value for this object configured as part of 
            the document type or an empty string if no value was configured.
            </summary>
            <remarks>
            All objects that are associated with document metadata have an optional
            custom string value that may be configured at design time.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormControlContext.ExitControlReason">
            <summary>
            Gets a value indicating the reason the <c>ExitControl</c> event was fired.
            </summary>
            <remarks>
                <para>This property is only valid during the <c>ExitControl</c> event. At all
                other times its value is indeterminate.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.IsBoundTo(System.String)">
            <summary>
            Determines whether the value of this control is bound to the data value of
            a particular field.
            </summary>
            <param name="fieldName">The case-insensitive name of the data field to test.</param>
            <returns>True if this is bound to data value of the field, false otherwise.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.FindFieldData(System.String)">
            <summary>
            Finds a field data object by field name.
            </summary>
            <remarks>
            The method searches the entire document associated with the form that this
            control belongs to and is not limited to this control.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>The field data on success, null on failure.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.ShowControl(System.Boolean)">
            <summary>
            Shows or hides the UI control.
            Not Applicable for controls already set at design time as Hidden.
            </summary>
            <remarks>
                <para>If the control was configured as hidden at design time, this method
                does nothing.</para>
                <para>If a databound control is hidden and 
                data entry is incomplete for the control, the operator will not be able
                to complete the data entry and will not know which field requires
                completion.</para>
            </remarks>
            <param name="show">If true, show control. If false, hide control. </param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.EnableControl(System.Boolean)">
            <summary>
            Enables or disables the UI control.
            </summary>
            <remarks>
                <para>If the control was configured as read-only at design time, this method
                does nothing.</para>
                <para>If a databound control is disabled and 
                data entry is incomplete for the control, operator will not be able
                to complete the data entry.</para>
            </remarks>
            <param name="enable">If true, enable control for input. If false, disable control.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.SetControlReadOnly(System.Boolean)">
            <summary>
            Sets or clears the read-only state for a text box control. 
            </summary>
            <param name="readOnly">True to make the field read-only, false to make it read-write.</param>
            <remarks>
                <para>This method does nothing when any of the following are true.</para>
                <list type="bullet">
                    <item><description>The field was configured as read-only at design time.</description></item>
                    <item><description>The form section containing this control does not allow editing
                        (<see cref="P:Emc.InputAccel.UimScript.IUimFormSectionContext.AllowEdit"/> is false).</description></item>
                    <item><description>The control is not a text box. Controls other than text boxes 
                        do not distinguish between the read-only and enabled states.</description></item>
                </list>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.SetText(System.String)">
            <summary>
            Sets the text for the control.
            </summary>
            <remarks>
                <para>
                If the control is bound to a field in the document object, setting the text of the control 
                does not update the value of the bound field until after the event completes. To ensure 
                that changes are applied immediately, instead of setting the value with this method, 
                use <see cref="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetValue(System.Object)"/> 
                on the control’s <see cref="P:Emc.InputAccel.UimScript.IUimFormControlContext.FieldDataContext"/>.
                </para>
            <para>
            For choice-based controls, list boxes and drop-down list boxes, this selects the item that
            has the same display text as the specified string. For checkboxes,
            this checks the checkbox if text is "true".
            </para>
            <para>
            When the text is set in a bound control with a restriction mask, the text is parsed 
            according to the mask and the field value is updated with the parsed text.
            For example, if the mask is "000-000-0000" and the supplied text will be "800.555.1212", 
            then the field value is "8005551212" and the control text will be "800-555-1212".
            </para>
            <para>
            When the text is set in a bound control, the text is parsed and the field value is
            updated. If the value does not parse correctly, such as setting the text to "abc" for
            a control that is bound to a number field, the specified value is still displayed
            in the control, but the data field is set to its default value.
            </para>
            </remarks>
            <param name="text">Text value to set.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.GetListChoiceNames">
            <summary>
            Gets the choice names from a list box or drop-down list box.
            </summary>
            <returns>Current choice names or an empty list if the control is not a 
            list box or drop-down list box.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.SelectListItem(System.Int32)">
            <summary>
            Selects a list item by its index.
            </summary>
            <param name="index">The zero-based index of the item to select.</param>
            <returns>True if an item had been selected, false if the index is out of range
            or the control is not a list box or drop-down list box.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.SetListItems(System.String[],System.String[])">
            <summary>
            Fills the choices for a list box or drop-down list box.
            </summary>
            <remarks>
                <para>The choice names are the strings that are displayed to the operator. The
                choice values are those which are stored in the field.</para>
                <para>If this is not a list type then the call is ignored.</para>
                <para>If the current value for the field is not one of the values provided to this method,
                the field value is cleared. To retain the text of the previous selection, get the text of
                the control using <see cref="P:Emc.InputAccel.UimScript.IUimFormControlContext.Text"/>, then
                change the options using this method, and finally set the original text back to the control using
                <see cref="M:Emc.InputAccel.UimScript.IUimFormControlContext.SetText(System.String)"/>.</para>
            </remarks>
            <param name="choiceNames">Choice names shown in list box for selection.</param>
            <param name="choiceValues">Optional. If null, then choice name is used as value.
            If non null then must have same number of entries as choice names.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormControlContext.SetFocus">
            <summary>
            Sets focus to the control.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimDataEntryFormContext">
            <summary>
            Represents a data entry form.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting or by the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataEntryFormContext.FormName">
            <summary>
            Gets the name of the form.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataEntryFormContext.UimDataContext">
            <summary>
            Gets the bound document data object or null if this form is not bound to any
            document data.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataEntryFormContext.WorkLevel">
            <summary>
            Gets the work level for the current step.
            </summary>
            <remarks>
            <para>
            The work level is configured during setup for the step. The possible values
            are "Manual", "Character", "Field", and "Document".
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.GetControlContextArray">
            <summary>
            Gets an array of all controls on the form.
            </summary>
            <returns>An array of form controls or an empty array if the form has no controls.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.FindFormSection(System.String)">
            <summary>
            Finds a named section in the form.
            </summary>
            <param name="sectionName">The case-insensitive form section name.</param>
            <returns>The named form section or null if the name is not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.FindControl(System.String)">
            <summary>
            Finds a control on the form by control name.
            </summary>
            <param name="controlName">The case-insensitive control name.</param>
            <returns>The named control or null if no control was found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.FindDataBoundControl(System.String)">
            <summary>
            Finds a control on the form by its bound data field name.
            </summary>
            <remarks>
            If more than one data control is bound to same data field
            then the first is returned. For array fields, the control bound to the 
            first data element is returned.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>The form control or null if the field was not found or was not 
            bound to a form control.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.FindArrayDataBoundControls(System.String)">
            <summary>
            Finds all controls on the form that are bound to an array field by their
            bound data field name.
            </summary>
            <remarks>
            If the named field is not an array field, the returned array has one entry.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>An array of controls or an empty array if the field was not 
            found or was not bound to a form control.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.ShowDataBoundControls(System.String,System.Boolean)">
            <summary>
            Shows or hides the controls bound to a data field.
            </summary>
            <remarks>
            For more information about the effect of hiding a control,
            see <see cref="M:Emc.InputAccel.UimScript.IUimFormControlContext.ShowControl(System.Boolean)"/>.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <param name="show">If true show the control, if false hide the control.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.SetDataBoundControlCaption(System.String,System.String)">
            <summary>
            Sets the label text for a data-bound control by data field name.
            </summary>
            <remarks>
            For scalar fields, this sets the text of the label for the bound control. 
            <para>
            For array fields, this sets either the label for the bound control in record
            view or the column header in table view. Both views share the same caption 
            so that method does not need to be called separately for each view.
            </para>
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <param name="caption">The new caption to display.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.GetDataBoundControlCaption(System.String)">
            <summary>
            Gets the caption for a data-bound control by field name.
            </summary>
            <remarks>
            The method throws an exception if the field does not exist.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>The field caption.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.SetControlTooltip(System.String,System.String)">
            <summary>
            Sets the tooltip for a control by name.
            </summary>
            <param name="controlName">The case-insensitive control name.</param>
            <param name="toolTip">The new tooltip string.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.GetControlTooltip(System.String)">
            <summary>
            Get the tooltip for a control by name.
            </summary>
            <remarks>
            The method throws an exception if the control does not exist.
            </remarks>
            <param name="controlName">The case-insensitive control name.</param>
            <returns>The tooltip text or null if none set.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataEntryFormContext.RefreshControls">
            <summary>
            Update the content of all form controls to reflect any changes to the data.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimDataContext">
            <summary>
            Represents the run-time data for a document.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting.</para>
                <para>In the Identification module, only the 
                <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.DocumentName"/> and 
                <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.FlaggedReason"/> properties are supported
                on document-level instances of this interface.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.DocumentName">
            <summary>
            Gets the name of the document type that is bound to this form object or 
            null if the runtime data does not have a document type.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.StepCustomValue">
            <summary>
            Gets the custom input string value configured as part of the step for
            the current task or an empty string if no value was configured.
            </summary>
            <remarks>
                <para>All documents in the task share the same value.</para>
                <para>This property is not supported in the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.FlaggedReason">
            <summary>
            Gets or sets the flag text for the document or an empty string if the field is not flagged.
            </summary>
            <remarks>
                <para>The flag value should be set to one or more of the preconfigured values for 
                the step separated by commas.</para>
                <para>When this object represents the pre-indexing data in the Identification module,
                the page-level flags must be accessed using the page returned by  
                <see cref="M:Emc.InputAccel.UimScript.IUimDataContext.GetPages"/> and not this property.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.TempDirectoryPath">
            <summary>
            Gets the path to a directory the script can use to store temporary files.
            </summary>
            <remarks>
                <para>The directory is automatically purged by the calling
                framework, although script-created temporary files are guaranteed to exist
                until end of current task. This directory is shared by more than just the
                current task, so script authors should always use
                global unique identifiers to avoid file name conflicts.</para>
                <para>This property is not supported in the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.TaskValues">
            <summary>
            Gets the task-level output values dictionary for custom, external data handling.
            </summary>
            <remarks>
                <para>Until the task is closed, the script controls the contents of this dictionary and can
                add, change, or remove values. When the task is closed, any items 
                in the dictionary will be sent to the platform for updating, the details of
                which are platform-specific. As the dictionary is not supported by all platforms, 
                it may be null and applications must test for this before trying to set values.</para>
                <para>These values are written as dynamic InputAccel
                nodal values of the task node. For example, if the task is at level 2 (folder) and the
                script created a TaskValues key "TotalCount" with the value "100", then on exit a dynamic
                value with name "TotalCount" and string value "100" is created at level 2. InputAccel
                can only create strings as dynamic values. If the task
                value is not a string, the value is converted to a string
                and the format is not deterministic. Therefore, script
                authors should provide appropriately-formatted strings for all values. 
                Dynamic values are not created for entries with null values.</para>
                <para>This property is not supported in the .NET Code module.</para>
            </remarks>
            <para>
            For platforms other than InputAccel, any data type supported by the platform may be used
            to pass values. The value name must follow platform-specific name syntax.
            </para>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.DocumentScript">
            <summary>Gets the document-type script associated with this document. (Added in 7.5)</summary>
            <remarks>
                <para>The property returns null if the document has no associated script</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.CustomValue">
            <summary>
            Gets the custom string value for this object configured as part of 
            the document type or an empty string if no value was configured.
            </summary>
            <remarks>
                <para>All objects that are associated with document metadata have an optional
                custom string value that may be configured at design time.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimDataContext.TaskFinishOnErrorNotAllowed">
            <summary>
            Gets or sets a value indicating whether the operator is prevented from 
            completing the task when the document has errors.
            </summary>
            <remarks>
                <para>This value is used only by Identification and Completion and is not used by Extraction. 
                Tasks always complete in Extraction independent of the value of this property.</para>
                <para>The value for this property should typically be initialized in the <c>DocumentLoad</c>
                event and then updated as data in the document changes.</para>
                <para>This value is checked before the module fires the 
                <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.BeforeTaskFinish(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.CloseReasonCode)"/> event. If the
                value is changed in either that event or <c>DocumentUnload</c>, the new value is
                not checked.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.GetPages">
            <summary>
            Gets the pages that belong to this document and its children. (Added in 7.5.)
            </summary>
            <returns>An array of pages. The array is empty if this method is called from 
            any module other than Identification.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.GetFieldDataContextArray">
            <summary>
            Gets an array of all data fields in the document.
            </summary>
            <returns>An array of all data fields or an empty array if the document hs no data fields.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.FindTableSection(System.String)">
            <summary>
            Finds a table section by name.
            </summary>
            <param name="name">The case-insensitive table section name.</param>
            <returns>The named table section or null if the name is not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.FindFieldDataContext(System.String)">
            <summary>
            Finds a data field by name.
            </summary>
            <remarks>
            For array fields, the first element is returned.
            </remarks>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>The data field or null if the field was not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.FindArrayFieldDataContext(System.String)">
            <summary>
            Finds all data fields for by table field name. 
            </summary>
            <remarks>
            <para>If the named field is not an array field, the returned array has one entry.
            If a field data object with given name does not exist then returns empty array.</para>
            </remarks>
            <param name="fieldName">The case-insensitive table field name.</param>
            <returns>An array of data fields or an empty array if the field was not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.Trace(System.String,System.Object[])">
            <summary>
                Writes a message to the module trace log.
            </summary>
            <remarks>
                <para>For an example, see
                <see cref="M:Emc.InputAccel.CaptureClient.ICodeModuleStartInfo.Trace(System.String,System.Object[])"/>.</para>
            </remarks>
            <param name="message">
                The message to write to the trace log.
            </param>
            <param name="runtimeValues">
                An array of zero or more replacement values for the variables in the 
                <paramref name="message" /> parameter.
            </param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.SetLocale(System.String,Emc.InputAccel.UimScript.LocaleChangeAction)">
            <summary>
            Changes the document locale used for parsing and formatting data.
            </summary>
            <remarks>
                <para>The locale is stored with the document. The document will be displayed to an operator 
                in a later step with the locale set by this method. The specified locale will be used for 
                all subsequent parsing and formatting operations.</para>
            </remarks>
            <param name="localeName">The case-insensitive name of the new locale, such as "en-US".</param>
            <param name="localeAction">The action to take when setting the locale.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.GetLocale">
            <summary>
            Gets the current document locale.
            </summary>
            <remarks>
                <para>The locale is stored with the document. The document will be displayed to an operator 
                in a later step with the locale returned by this method.</para>
            </remarks>
            <returns>The name of the document locale, such as "en-US".</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.EnableValidationRule(System.String,System.Boolean)">
            <summary>
            Enables or disables a validation rule.
            </summary>
            <remarks>
                <para>This method is not supported in the .NET Code module.</para>
            </remarks>
            <param name="ruleName">The case-insensitive rule name.</param>
            <param name="enable">True to enable the rule and false to disable it.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.UnmarkFieldForValidationRule(System.String,System.String)">
            <summary>
            Unmarks a dependent field so that the rule validation error is not shown
            for the unmarked field.
            </summary>
            <remarks>
                <para>The specified field is only unmarked for the specified validation rule, not 
                for other rules that depend on the field. A dependent field may be unmarked
                but cannot be marked again.</para>
                <para>This method should be called during the DocumentLoad event to prevent the field
                from being marked with rule the validation error. Unmarking a dependent field 
                after the validation rule has run will not clear any existing validation error.
                In this case, you must execute the rule again or explicitly clear the error.</para>
                <para>If the rule does not contain <paramref name="fieldName"/> 
                as a dependent field, the method does nothing and no error is returned.</para>
                <para>This method is not supported in the .NET Code module.</para>
            </remarks>
            <param name="ruleName">The case-insensitive rule name.</param>
            <param name="fieldName">The case-insensitive field name.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.RunValidationRules">
            <summary>
            Forces all enabled validation rules in the document to run.
            </summary>
            <remarks>
                <para>This method is not supported in the .NET Code module.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.RunPopulationRules(System.Boolean)">
            <summary>
            Forces all enabled population rules in the document to run. (Added in 7.5)
            </summary>
            <remarks>
                <para>This method is not supported in the .NET Code module.</para>
            </remarks>
            <param name="runAll">If true, all rules are run whether trigger field had changed or not.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.ValidateQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Emc.InputAccel.CaptureClient.ExpectedRowCount)">
            <summary>
            Validates that the number of rows in a named query matched the expected number.
            </summary>
            <remarks>
                <para>The named query and its parameters are created in the designer.</para>
                <para>If the parameters dictionary contains names that are not in the dictionary, those 
                values are ignored. If it is missing parameters used by the named query, an 
                exception is thrown.</para>
            </remarks>
            <param name="queryName">The case-insensitive query name.</param>
            <param name="parameters">A dictionary of named parameters to substitute in the query statement.</param>
            <param name="expectedRowCount">The expected number of returned rows</param>
            <returns>true if row count expectation is met, else false</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.LookupData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Retrieves the results of a named query as a table.
            </summary>
            <remarks>
                <para>The named query and its parameters are created in the designer.</para>
                <para>If the parameters dictionary contains names that are not in the dictionary, those 
                values are ignored. If it is missing parameters used by the named query, an 
                exception is thrown.</para>
            </remarks>
            <param name="queryName">The case-insensitive query name.</param>
            <param name="parameters">A dictionary of named parameters to substitute in the query statement.</param>
            <returns>The query data returned from the data source</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.LookupColumnData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Retrieves the results of a named query for a single column as an array.
            </summary>
            <remarks>
                <para>The named query and its parameters are created in the designer.</para>
                <para>If the parameters dictionary contains names that are not in the dictionary, those 
                values are ignored. If it is missing parameters used by the named query, an 
                exception is thrown.</para>
                <para>If the selected column is not in the result set, an exception is thrown.</para>
            </remarks>
            <param name="queryName">The case-insensitive query name.</param>
            <param name="parameters">A dictionary of named parameters to substitute in the query statement.</param>
            <param name="columnName">The case-insensitive column name.</param>
            <returns>The array of values for the selected column</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.GetValidationRuleFailMessage(System.String)">
            <summary>
            Gets the failure message for a validation rule.
            </summary>
            <param name="ruleName">The case-insensitive validation rule name.</param>
            <returns>Failure message of the validation rule. Throws an exception if the rule does not exist.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.SetValidationRuleFailMessage(System.String,System.String)">
            <summary>
            Sets the failure message for a validation rule.
            </summary>
            <param name="ruleName">The case-insensitive validation rule name.</param>
            <param name="failMessage">The new failure message. The message can include hyperlinks by
            formatting the links as [link text|url].</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimDataContext.ApproximateMatch(System.String,System.String,System.Boolean)">
            <summary>
            Returns a value that indicates the similarity of two strings.
            </summary>
            <remarks>
                <para>The returned value is in the range of 0 - 100 where 0 indicates no
                similarity at all and 100 indicates a perfect match.</para>
                <para>The match is determined by the length of the longest string minus
                the minimum number character replacements needed to get a complete match.
                Each insertion, deletion, or update decreases one from the cost.
                The returned value is <c>((maxlen - replaceCharCount) * 100) / maxlen</c>.</para>
                <para>Because this operation is very computationally intensive, to limit the computing time, 
                only first 80 characters are used for detecting minimum number of corrections
                needed. After 80 characters, a simple positional compare is used. As a result, for 
                strings longer than 80 characters, the return value may not represent minimum
                changes needed but approximately identifies the amount of change needed.</para>
                <example>
                    <list type="table">
                        <listheader>
                            <term>Inputs</term>
                            <description>Output</description>
                        </listheader>
                        <item>
                            <term>"abcd", "abcx"</term>
                            <description>75</description>
                        </item>
                        <item>
                            <term>"abcd", "abcxy"</term>
                            <description>60</description>
                        </item>
                        <item>
                            <term>"abcd", "abcd"</term>
                            <description>100</description>
                        </item>
                        <item>
                            <term>"abcd", "xabcd"</term>
                            <description>80</description>
                        </item>
                        <item>
                            <term>"abc", "xyz"</term>
                            <description>0</description>
                        </item>
                        <item>
                            <term>"abcdefg", "abxyz12"</term>
                            <description>28</description>
                        </item>
                    </list>
                </example>
            </remarks>
            <param name="source1">First string</param>
            <param name="source2">Second string</param>
            <param name="caseSensitive">If true, compare case sensitive</param>
            <returns>Approximate match as a value between 0 - 100</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimFieldDataContext">
            <summary>
            Represents the run-time data for a field.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.Name">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.UimDataContext">
            <summary>
            Gets the document instance that owns this field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.Text">
            <summary>
            Gets the text value for the field.
            </summary>
            <remarks>
            The field text does not necessarily match the field value. If this is a
            numeric or date/time field and OCR extracts or the user enters a value that 
            cannot be parsed according to the data type, such as entering "ABC" for a 
            numeric field, the text is that from OCR or the user but the underlying
            value is the default for the field type.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.IsArray">
            <summary>
            Gets a value indicating whether this field is an array field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.TableSection">
            <summary>
            Gets the table section containing this field or 
            null if this is not an array field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ArrayIndex">
            <summary>
            Gets the zero-based index of this field in its array or 
            0 if this is not an array field.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.Value">
            <summary>
            Gets the data value for the field.
            </summary>
            <remarks>
            This will be the type specific default value if the text could not be parsed according 
            to the field format specification. The value may also be invalid if the field
            has a validation error.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsDouble">
            <summary>
            Gets the data value as a double.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to 0 if false and 1 if true.
            DateTimes are converted to the number of days since midnight, 30 December 1899.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsInt">
            <summary>
            Gets the data value as a 32-bit integer (Int32).
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to 0 if false and 1 if true.
            Doubles and decimals are rounded down.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsDecimal">
            <summary>
            Gets the data value as a decimal.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to 0 if false and 1 if true.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsString">
            <summary>
            Gets the data value as a string.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to "false" or "true".
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsBoolean">
            <summary>
            Gets the data value as a boolean.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown. 
            Values that can be converted are 0, 1, or "true" or "false", both case-insensitive.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsDate">
            <summary>
            Gets the data value as a DateTime.
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Only dates and times in string format can be converted.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValueAsLong">
            <summary>
            Gets the data value as long (Int64).
            </summary>
            <remarks>
            If the value cannot be converted an exception is thrown.
            Booleans are converted to 0 if false and 1 if true.
            Doubles and decimals are rounded down.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.IsValid">
            <summary>
            Gets a value indicating whether the field value is valid.
            </summary>
            <remarks>
            The field value is valid if it has neither field errors nor validation rule errors.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ValidationError">
            <summary>
            Gets the validation exception for the field or null if the field has no error.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ConfirmationPending">
            <summary>
            Gets a value indicating whether the field requires confirmation.
            <remarks>
            A field requires confirmation if both of the following are true.
            <list type="bullet">
            <item>The field was configured at design time to require user confirmation.</item>
            <item>The user has not yet confirmed the field.</item>
            </list>
            </remarks>
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.FlaggedReason">
            <summary>
            Gets or sets the flag text for the field or an empty string if the field is not flagged.
            </summary>
            <remarks>
            The flag value should be set to one or more of the preconfigured values for 
            the step separated by commas.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.NeedsCharacterRepair">
            <summary>
            Gets a value indicating whether this field contains unknown or low-confidence characters.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.AllowQuestionMarks">
            <summary>
            When it is set to <c>false</c>, every '?' character is considered as <see cref="P:Emc.InputAccel.UimScript.IUimFieldDataContext.NeedsCharacterRepair"/>.
            </summary>
            <remarks>
            By default it pre-set to the "Allow Question Marks" document type property from the Document Designer.
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.CustomValue">
            <summary>
            Gets the custom string value for this object configured as part of 
            the document type or an empty string if no value was configured.
            </summary>
            <remarks>
                <para>All objects that are associated with document metadata have an optional
                custom string value that may be configured at design time.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.PageId">
            <summary>
            Gets the batch node ID for the page from which this field has been extracted.
            </summary>
            <remarks>
                <para>Batch node IDs are positive, unique numbers within each batch.</para>
                <para>Values less than or equal to 0 indicate that the field was not extracted 
                from a physical batch node.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFieldDataContext.ExtractedText">
            <summary>
            Gets the text extracted from an image or an empty string if the field was not
            extracted from an image.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetDataConfirmed(System.Boolean)">
            <summary>
            Sets or clears the field confirmed status.
            </summary>
            <param name="confirmed">true to confirm the field value, false to clear the confirmation.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetValue(System.Object)">
            <summary>
            Sets the data value, updating the text shown in UI.
            </summary>
            <remarks>
                <para>When the field value is set, the new value is formatted and displayed in the UI.
                When the method is called during Identification, Extraction, and Completion, the validation rules 
                for the field are also reevaluated. Formatting and rule evaluation are both true whether or not
                the new value is different than the current value.</para>
                <para>If <paramref name="value"/> has a different data type than the field, the 
                value is converted to the field's data type. If the conversion fails, the 
                field value and text are both set to the default for the field's data type.</para>
                <para>This method is the same as calling 
                <see cref="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetValue(System.Object,Emc.InputAccel.UimScript.LowConfidenceCharacters)"/>
                with the low-confidence character handling set to <see cref="F:Emc.InputAccel.UimScript.LowConfidenceCharacters.Clear"/>.</para>
            </remarks>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetValue(System.Object,Emc.InputAccel.UimScript.LowConfidenceCharacters)">
            <summary>
            Sets the data value, updating the UI text and the list of characters to repair.
            </summary>
            <remarks>
                <para>The <paramref name="lowConfidenceCharacters"/> is only applied if the field value was originally extracted from an image.</para>
                <para>When the field value is set, the new value is formatted and displayed in the UI.
                When the method is called during Identification, Extraction, and Completion, the validation rules 
                for the field are also reevaluated. Formatting and rule evaluation are both true whether or not
                the new value is different than the current value.</para>
                <para>If <paramref name="value"/> has a different data type than the field, the 
                value is converted to the field's data type. If the conversion fails, the 
                field value and text are both set to the default for the field's data type.</para>
            </remarks>
            <param name="value">The new field value.</param>
            <param name="lowConfidenceCharacters">The way that question mark ("?") characters are handled in the new value.
            This parameter has only effect when the <see cref="P:Emc.InputAccel.UimScript.IUimFieldDataContext.AllowQuestionMarks"/> is <c>true</c>.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.SetValidationError(System.Exception)">
            <summary>
            Marks or clears the validation error.
            </summary>
            <remarks>
                <para>Fields with field errors or validation rule failures are marked with validation 
                errors by the system; these errors are cleared once the field value is correct 
                and the rules do not fail. This method provides a mechanism for manually marking 
                or clearing errors outside of the automated mechanism.</para>
                <para>If the field has an error and <paramref name="validationError"/> is not 
                null, the new exception replaces the existing error.</para>
                <para>
                    When possible, manually setting and clearing validation errors should be avoided. 
                    Instead, allow the module to manage error states using field properties and validation 
                    rules.
                </para>
            </remarks>
            <param name="validationError">A non-null exception to mark the field in error or
            null to clear existing field and validation-rule errors.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.FormatValue(System.Object,System.String)">
            <summary>
            Formats a value using the specified locale and configured field syntax.
            </summary>
            <remarks>
                <para>This method provides a way for a script to access the formatting capabilities of
                a field format without any explicit knowledge of the field settings.</para>
                <para>If <paramref name="value"/> has a different data type than the field, the 
                value is converted to the field's data type. If the conversion fails, the 
                returned text is the default value for the field's data type as a formatted string.</para>
            </remarks>
            <example>
            <para>
            If the field is a number field that is configured to use 2 decimal places
            and the value is the number 42, the value returned by this method is "42.00".
            </para>
            </example>
            <param name="value">The value to format.</param>
            <param name="locale">The locale name such as "en-US" to use for formatting the object or null
            to use the current document locale. Supported locales are those supported by the .NET framework.</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.Parse(System.String,System.String)">
            <summary>
            Parses a string into an object using the specified locale and configured field syntax.
            </summary>
            <remarks>
                <para>This method provides a way for a script to access the parsing capabilities of
                a field format without any explicit knowledge of the field settings.</para>
                <para>If parsing fails, an exception is thrown.</para>
            </remarks>
            <example>
            <para>
            If the field is a number field and the string is "42.20", the value returned by this method
            is the number 42.2.
            </para>
            </example>
            <param name="text">The text to parse.</param>
            <param name="locale">The locale name such as "en-US" to use for parsing the text or null
            to use the current document locale. Supported locales are those supported by the 
            .NET framework.</param>
            <returns>The value of the parsed text as an object of the same data type as the field 
            on which this method is called.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.MarkValueChanged">
            <summary>
            Causes the value to be considered "updated," reevaluating the related validation rules.
            </summary>
            <remarks>
                <para>This method does not change either the field value or text.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.HasUnflaggedError(System.String)">
            <summary>
            Determines whether this field has an error that is not suppressed by the specified 
            flag on either the field or a related dependent field.
            </summary>
            <remarks>
                <para>The method returns true if all of the following are true:</para>
                <list type="bullet">
                    <item><description>The field has an error.</description></item>
                    <item><description>The field does not contain the specified flag.</description></item>
                    <item><description>If the error is a validation rule error, no other 
                    field for the same error contains the specified flag.</description></item>
                </list>
                <para>When an operator in Identification or Completion applies a flag to a field that has a 
                validation rule error, the error is suppressed in the UI for both that field 
                containing the flag and all other dependent fields with the same error. In cases 
                where a flag is used to indicate that the error is allowed, the script must 
                determine which errors are allowed and which are not. A script can use this 
                method to determine whether the error on a field has been suppressed by the 
                operator using a specific flag.</para>
            </remarks>
            <param name="flag">The value of the flag to test.</param>
            <returns>True if the field has an error that is not suppressed by the specified
            flag.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFieldDataContext.ClearExtractionZone">
            <summary>
            Clears the extraction zone for this field instance.
            </summary>
            <remarks>
                <para>The extraction zone is displayed to the operator in Completion and Identification.
                When it is cleared, no zone from any page in the document will be associate with the field.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimFormSectionContext">
            <summary>
            Represents a section of form fields. If the section represents a data table, it 
            is shown as either a grid or a subform array.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting or by the .NET Code module.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.FormSectionName">
            <summary>
            Gets the form section name.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.IsGridView">
            <summary>
            Gets a value indicating whether the section contains array fields displayed as a grid.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.IsSubformArrayView">
            <summary>
            Gets a value indicating whether the section contains array fields displayed as a subform array.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.IsHidden">
            <summary>
            Gets a value indicating whether the section has been explicitly hidden.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.AllowEdit">
            <summary>
            Gets or sets a value indicating whether the operator can edit fields in this section.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.AllowNewRow">
            <summary>
            Gets or sets a value indicating whether the operator can append or insert rows in this section.
            </summary>
            <remarks>This value is only used when the form section represents a data table.</remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.AllowDeleteRow">
            <summary>
            Gets or sets a value indicating whether the operator can delete rows in this section.
            </summary>
            <remarks>This value is only used when the form section represents a data table.</remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.FormContext">
            <summary>
            Gets the form that owns this section.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimFormSectionContext.BoundTableSection">
            <summary>
            Gets the data table that is bound to this form section or null if this section is not a table.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormSectionContext.FindFormControlByName(System.Int32,System.String)">
            <summary>
            Finds a control in the form by row number and control name.
            </summary>
            <remarks>
            The method will find a control independent of whether the form is
            displayed as a grid or as a sub-form array.
            </remarks>
            <param name="row">The zero-based row index.</param>
            <param name="controlName">The case-insensitive control name.</param>
            <returns>The form control object at the given cell or null if the row does 
            not exist or the control is not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormSectionContext.FindFormControlByFieldName(System.Int32,System.String)">
            <summary>
            Finds a control in the form by row number and its bound data field name.
            </summary>
            <remarks>
            The method will find a control independent of whether the form is
            displayed as a grid or as a sub-form array.
            </remarks>
            <param name="row">The zero-based row based row index.</param>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>Form control object at the given row that is bound to the
            given field or null.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormSectionContext.GetFormControlNames">
            <summary>
            Get the names of all control objects in this section.
            </summary>
            <returns>The array of control names.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimFormSectionContext.Show(System.Boolean)">
            <summary>
            Shows or hides the section.
            </summary>
            <remarks>
            If databound controls in a table section are hidden and 
            data entry is incomplete for the controls, the operator will not be able
            to complete the data entry and will not know which field requires
            completion.
            </remarks>
            <param name="show">True to show the section, false to hide it.</param>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimTableSectionContext">
            <summary>
            Represents a collection fields that form a logical table. A table 
            section must have all fields as array fields.
            </summary>
            <remarks>
                <para>This interface is not used in CaptureFlow scripting.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTableSectionContext.TableName">
            <summary>
            Gets the name of the table section.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTableSectionContext.DataContext">
            <summary>
            Gets the document instance that owns this section.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimTableSectionContext.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimTableSectionContext.GetFieldAt(System.Int32,System.String)">
            <summary>
            Gets a field data object by row number and field name.
            </summary>
            <remarks>
            The method throws an exception if the row is invalid or the field does not exist.
            </remarks>
            <param name="row">The zero-based row based row index.</param>
            <param name="fieldName">The case-insensitive field name.</param>
            <returns>The field data.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimTableSectionContext.GetFieldNames">
            <summary>
            Gets the names of all of the field objects in this section.
            </summary>
            <returns>An array of field names.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimTableSectionContext.InsertNewRow(System.Int32)">
            <summary>
            Adds or inserts a new row in the table.
            </summary>
            <remarks>
                <para>Inserts a new row above the given row index. 
                Appends a new row if row index is -1.
                Ignores the operation if row index is not valid.</para>
            </remarks>
            <param name="rowIndex">The zero-based row index above which to insert
            the new row or -1 for to append a new row.</param>
            <returns>The index of the newly-inserted row index or -1 if no 
            row was inserted.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimTableSectionContext.DeleteRow(System.Int32)">
            <summary>
            Deletes the row at given index. 
            </summary>
            <param name="rowIndex">The zero-based row based row index.</param>
            <returns>True if the row was deleted, false if the row index is invalid.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimTableSectionContext.ClearTable">
            <summary>
            Deletes all rows in the table. 
            </summary>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.IUimScriptFilterContext">
            <summary>
            Represents the runtime context of an image processing profile
            that is configured in Captiva Designer.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptFilterContext.Name">
            <summary>
            Gets the name of the profile.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.IUimScriptFilterContext.FilterCount">
            <summary>
            Gets the number of filters in the profile.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.GetImageFilterNameAt(System.Int32)">
            <summary>
            Gets the name of the filter at the specified index.
            </summary>
            <remarks>
            <para>The filter name is configured at design time.</para>
            <para>The method throws an exception if the index is out of range.</para>
            </remarks>
            <param name="index">The zero-based based filter index.</param>
            <returns>The name of the filter at the specified index.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.GetImageFilterTypeNameAt(System.Int32)">
            <summary>
            Gets the name of the image filter type at the specified index.
            </summary>
            <remarks>
            <para>The filter type name is defined by the filter provider.</para>
            <para>The method throws an exception if the index is out of range.</para>
            </remarks>
            <param name="index">The zero-based based filter index.</param>
            <returns>The name of the filter type at the specified index.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.ExecuteFilterAt(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},Emc.InputAccel.ImageFilter.ImageData,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes the image filter at the specified index.
            </summary>
            <remarks>
            <para>The method throws an exception if the index is out of range.</para>
            </remarks>
            <param name="filterIndex">The index of the filter to execute.</param>
            <param name="filterPropertyOverrideMap">A collection of named values that will
            override the filter configuration. Only the values that need to be overridden must 
            be added to the collection. If the value is null or empty, the default configuration
            is used.</param>
            <param name="imageData">The input image onto which the filter is applied.</param>
            <param name="outValues">A collection of named values that returned by the filter.</param>
            <returns>The modified image after the filter has been applied.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.ApplyAnnotationsFromProfile">
            <summary>
            Applies the annotations configured in the profile after the script completes.
            </summary>
            <remarks>
            <para>Configured annotations are applied before any custom annotations, 
            independent of when this method is called.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.CreateAndApplyAnnotation(System.Windows.Rect,System.String,System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Creates a new annotation and applies it to the image after the script completes.
            </summary>
            <remarks>
            <para>The foreground and background colors must be formatted as 4 bytes of ARGB with 
            Alpha as the most significant byte and Blue as the least significant byte.</para>
            <para>The font used for text annotations is not configurable.</para>
            <para>Annotations created with this method are applied to the image in the order
            they were created. If annotations in the profile are also applied by calling 
            <see cref="M:Emc.InputAccel.UimScript.IUimScriptFilterContext.ApplyAnnotationsFromProfile"/>,
            those annotations are applied before any custom annotations.</para>
            </remarks>
            <param name="rectangle">Rectangle in pixels where the annotation is applied.</param>
            <param name="annotationType">The type of the annotation. The value must be one of: 
            "Redaction", "Text", "Highlight", or "Comment". Other types are not supported.</param>
            <param name="argbColorForeground">The color used for border and text. Refer to Remarks for 
            details on the format.</param>
            <param name="argbColorBackground">The color used for the background, redactions, and highlights. 
            Refer to Remarks for details on the format.</param>
            <param name="opacity">The opacity of the annotation. The valid range is 0.0-1.0 where
            0.0 is transparent and 1.0 is opaque.</param>
            <param name="formatText">The text shown for text annotations and included as a
            comment for all other annotation types. The text can use placeholders 
            to substitute variables from batch node values.</param>
        </member>
        <member name="T:Emc.InputAccel.UimScript.ScriptException">
            <summary>
            Class <c>ScriptException</c> is the general runtime exception thrown by
            scripts.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.ScriptException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message string.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.ScriptException.#ctor(System.Exception,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="cause">Causing exception in case of chained exceptions.</param>
            <param name="message">message string.</param>
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimLccScript">
            <summary>
            Class <c>UimLccScript</c> is the base class for all UIM scripting
            modules used to access LCC batch. A LCC scripting module is run when
            a noop step is configured for scripting. The scripting class must extend
            this class and have a class name based on the process flow name as
            "Custom.LccUimScript.Script[process flow name with spaces replaced by underscore]".
            For every step that is configured for scripting, a method with the following
            signature is invoked.
            Execute[step name, with spaces replaced by underscore](ILccBatch batch, string customString, int customInt);
            Step name is case sensitive.
            </summary>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimLccScript.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimLccScript.InternalReservedCall(System.Int64,System.String,Emc.InputAccel.UimScript.ILccBatch,System.String)">
            <summary>
             Internal method to fire script event.    
            </summary>
            <param name="accessKey">Internal access key</param>
            <param name="stepName">Step name.</param>
            <param name="batch">Batch object.</param>
            <param name="customString">Custom string value.</param>
            <returns>True if the method is found and event is delivered.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimScriptBatchCreate">
            <summary>
            The base class for batch-creation scripts. (Added in 7.5)
            </summary>
            <remarks>
                <para>The script module must implement a class named <c>ScriptMyProfile</c> that extends
                this class where "MyProfile" is the name of the profile that will use this script.
                Batch-creation scripts must be placed in the <c>Custom.InputAccel.UimBatchScript</c> namespace.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptBatchCreate.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptBatchCreate.Dispose">
            <summary>
            Called when the script instance is discarded.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptBatchCreate.CanStartCycle(Emc.InputAccel.UimScript.IUimScriptBatchCreateServiceContext)">
            <summary>
            Fired when the module needs to test whether to begin a polling cycle.
            </summary>
            <param name="context">An object that contains information about the running module.</param>
            <returns>true if a cycle can start, false otherwise</returns>
            <remarks>
                <para>This event is only fired when the profile has no polling expression. Otherwise the
                expression is used to control polling cycle timing.</para>
                <para>The event enables a script to apply more complex logic than just time of day to control
                polling cycles. As the event will be fired frequently while waiting for a cycle to begin, 
                it should return quickly.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptBatchCreate.ProcessList(Emc.InputAccel.UimScript.IUimScriptBatchCreateListContext,System.Collections.Generic.IList{Emc.InputAccel.UimScript.IImportNodeItem})">
            <summary>
            Fired when a set of items is about to be assembled into a batch.
            </summary>
            <param name="context">An object that contains information about the running module and is used to
            control the content and structure fof the batch.</param>
            <param name="items">The raw list of items for the batch. The list contains the original 
            node breaks that define the tree structure.</param>
            <remarks>
                <para>This event is fired after the module scans a directory and prepares a list of items.
                The module orders the files according to the profile configuration and inserts breaks 
                to identify:</para>
                <list type="bullet">
                    <item><para>Which items are to be removed from the batch</para></item>
                    <item><para>Which items are to be deferred to another batch</para></item>
                    <item><para>Where tree node breaks are found</para></item>
                </list>
                <para>It also initializes the list ID, batch name, and batch priority.</para>
                <para>The script uses this event to change the structure and data of the batch. After the 
                method returns, it will be called again as long as items remain to be processed. Each 
                call will result in the module creating one batch. The module does not watch for new items
                until all items have been processed by either adding them to a batch or by setting their
                status to <see cref="F:Emc.InputAccel.UimScript.NodeBreakKind.Skip" /> to permanently 
                skip them.</para>
                <para>For more details on manipulating the list of items, see the topic “Defining the 
                Batch Structure” in the Scripting Guide.</para>
            </remarks>
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimScriptDocument">
            <summary>
            The base class for document type scripts.
            </summary>
            <remarks>
            <para>
            The script module must implement a class named <c>ScriptMyClass</c> that extends
            this class where "MyClass" is the name of the document type for which this
            class will be used.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.#ctor">
            <summary>
            Initializes a new instance of the UimScriptDocument class.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.GetInternalEventInProgress(System.Int64)">
            <summary>
            Gets a value indicating whether [event in progress].
            </summary>
            <param name="accessKey">An internal unpublished reserved key value.</param>
            <returns>_eventInProgress.</returns>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.InternalReservedCall(System.Int64,Emc.InputAccel.UimScript.DocumentEventKind,Emc.InputAccel.UimScript.IUimDataContext,System.String,Emc.InputAccel.UimScript.IUimDataEntryFormContext,Emc.InputAccel.UimScript.IUimFormControlContext,Emc.InputAccel.UimScript.IUimTableSectionContext,System.Int32,System.Int32)">
            <summary>
            Internal method to fire a script event. This method is reserved for
            internal use and must not be called from any script code.
            </summary>
            <param name="accessKey">An internal unpublished reserved key value.</param>
            <param name="documentEvent">Type of event.</param>
            <param name="dataContext">Document data context object.</param>
            <param name="ruleName">Rule name in case of validation rule.</param>
            <param name="formContext">Data entry form context in case of form event.</param>
            <param name="formControl">UI control in case of Ui event.</param>
            <param name="table">Table object.</param>
            <param name="rowIndex">Table row index.</param>
            <param name="rowIndex2">Table to row for move operation.</param>
            <returns>True if the event is delivered to a method. False, if no
            method implementation was found.</returns>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.FindGlobalResource(System.String)">
            <summary>
            Gets a named global resource.
            </summary>
            <remarks>
            <para>
            Global resources can be used to share resources, such as connections to external
            content stores, across all tasks and document types.
            </para>
            </remarks>
            <param name="resourceName">The case-insensitive name of the resource.</param>
            <returns>The resource associated with the specified name or null if the
            named resource was not found.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.SetGlobalResource(System.String,System.Object)">
            <summary>
            Sets a named global resource.
            </summary>
            <remarks>
            <para>
            Global resources can be used to share resources, such as connections to external
            content stores, across all tasks and document types.
            </para>
            <para>
            The resource is stored until the application exits unless it is explicitly
            removed or replaced with another value. The user script is responsible for 
            any additional clean up of removed or replaced resources. For example, if the 
            stored resource is a database connection, the user script should first get the 
            resource and close the connection before removing it.
            </para>
            </remarks>
            <param name="resourceName">The case-insensitive name of the resource.</param>
            <param name="value">The resource value to store or null to 
            remove the resource.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptDocument.InternalFireEventImpl(Emc.InputAccel.UimScript.DocumentEventKind,Emc.InputAccel.UimScript.IUimDataContext,System.String,Emc.InputAccel.UimScript.IUimDataEntryFormContext,Emc.InputAccel.UimScript.IUimFormControlContext,Emc.InputAccel.UimScript.IUimTableSectionContext,System.Int32,System.Int32)">
            <summary>
            Deliver event to a script method.
            </summary>
            <param name="documentEvent">Event type.</param>
            <param name="dataContext">Uim Data</param>
            <param name="ruleName">Rule</param>
            <param name="formContext">Form context</param>
            <param name="formControl">Control</param>
            <param name="table">Table object.</param>
            <param name="rowIndex">Table row index.</param>
            <param name="rowIndex2">Table to row for move operation.</param>
            <returns>True if a script method was found and event was delivered.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimScriptFilter">
            <summary>
            The base class for image processing filter scripts.
            </summary>
            <remarks>
            <para>
            The script module must implement a class named <c>ScriptMyClass</c> that extends
            this class where "MyClass" is the name of the image processing profile for 
            which this class will be used.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptFilter.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptFilter.ExecuteSuperFilter(Emc.InputAccel.ImageFilter.ImageData,System.String,Emc.InputAccel.UimScript.IUimScriptFilterContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a scripted image processing profile filter
            </summary>
            <remarks>
            <para>
            The <paramref name="outValues"/> are populated by the individual filters 
            as they are applied to the image. The script can keep, modify, or remove these 
            values.
            </para>
            <para>
            Once the task is complete, any values in the dictionary that have the same name 
            and type as an MDF value for the step will be stored as IA values. User-defined
            values can also be saved provided that the user has added those values to either
            the MDF file or through Captiva Designer.
            </para>
            </remarks>
            <param name="imageData">The input image onto which filters are applied.</param>
            <param name="stepCustomValue">The step-specific custom scripting value.</param>
            <param name="uimScriptFilterContext">The runtime context for the filter.</param>
            <param name="outValues">A collection of named values returned by the method.</param>
            <returns>The modified image after filters have been applied.</returns>
        </member>
        <member name="T:Emc.InputAccel.UimScript.GlobalEventKind">
            <summary>
            Global event kinds.
            </summary>
            <exclude />
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.NodeMoved">
            <summary>
            A node is moved either within same parent node or to a different parent node.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.NodeAdded">
            <summary>
            A new node is added to the task.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.NodeDeleted">
            <summary>
            An existing node in the task is deleted.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.DocumentTypeChanged">
            <summary>
            The document type for a document has been changed. 
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.BeforeDocumentExtracted">
            <summary>
            Before document data is extracted.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventKind.FilterBatchList">
            <summary>
            Allows to filter batch list returned to module.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.GlobalEventReason">
            <summary>
            Reasons for global events that change the structure of the task.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventReason.Standalone">
            <summary>
            The node was added, moved, or deleted as a stand-alone event.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventReason.NodeSplit">
            <summary>
            The node was added or moved as part of a split event.
            </summary>
        </member>
        <member name="F:Emc.InputAccel.UimScript.GlobalEventReason.NodeMerged">
            <summary>
            The node was moved or deleted as part of a merge event.
            </summary>
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimScriptMainCore">
            <summary>
            The base class for script assemblies.
            </summary>
            <remarks>
            <para>
            The script module must implement a class named <c>ScriptMain</c> that extends
            this class. Otherwise the module will not be loaded.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.#ctor">
            <summary>
            Initializes a new instance of the UimScriptMainCore class.
            </summary>
            <remarks>
                <para>Do not initialize scripts in this constructor. Initialization should instead be done in the
                <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.ScriptLoad"/> method.
                The <see cref="P:Emc.InputAccel.UimScript.UimScriptMainCore.ModuleId"/> and
                <see cref="P:Emc.InputAccel.UimScript.UimScriptMainCore.IALoginUserName"/> properties
                are not available in the constructor.
                </para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.UimScriptMainCore.ModuleId">
            <summary>
            Gets the ID of the currently executing module.
            </summary>
            <remarks>
                <para>The module ID is the name of the module as identified within the product license.
                For example, the module ID for Identification is "CPIDENTF" and the module ID for 
                Completion is "CPDSKTOP".</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.UimScriptMainCore.IALoginUserName">
            <summary>
            Gets the domain and user name used to login to the Captiva Capture server.
            </summary>
            <remarks>
                <para>If the returned value is "*", the connection to the server is made with
                the user under which the application is running as defined by the system
                <see cref="P:System.Environment.UserName" /> property.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.InternalReservedSetIALoginName(System.Int64,System.String)">
            <summary>
            Reserved for internal use. Script code must never call this function.
            </summary>
            <param name="accessKey">Internal code</param>
            <param name="name">Name</param>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.InternalReservedSetModuleId(System.Int64,System.String)">
            <summary>
            Reserved for internal use. Script code must never call this function.
            </summary>
            <param name="accessKey">Internal code</param>
            <param name="name">Name</param>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.ScriptLoad">
            <summary>
            Called when the script subsystem is first loaded before any other events are fired.
            </summary>
            <remarks>
            <para>
            The implementing class can override this method to provide additional
            initialization. An overridden implementation must always call base class
            method before doing anything else.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.ScriptUnload">
            <summary>
            Called when the script subsystem is unloaded.
            </summary>
            <remarks>
            <para>
            The implementing class can override this implementation to provide additional 
            unload-related clean up. An overridden implementation must always call 
            the base class after doing everything else.
            </para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.InternalReservedCall(System.Int64,Emc.InputAccel.UimScript.GlobalEventKind,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext,System.Int32,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Internal reserved method to handle global event.
            </summary>
            <param name="accessKey">Reserved for internal 1.</param>
            <param name="globalEvent">Reserved for internal 2.</param>
            <param name="node">Reserved.</param>
            <param name="parent">Reserved for internal 3.</param>
            <param name="parent2">Reserved for internal 4.</param>
            <param name="document1">Reserved for internal 5.</param>
            <param name="document2">Reserved for internal 6.</param>
            <param name="index1">Reserved for internal 7.</param>
            <param name="index2">Reserved for internal 8.</param>
            <param name="reason">Reserved for internal 9.</param>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.InternalReservedCall(System.Int64,Emc.InputAccel.UimScript.GlobalEventKind,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext,System.Int32,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Internal reserved method to handle global event.
            </summary>
            <param name="accessKey">Reserved for internal 1.</param>
            <param name="globalEvent">Reserved for internal 2.</param>
            <param name="node">Reserved.</param>
            <param name="parent">Reserved for internal 3.</param>
            <param name="parent2">Reserved for internal 4.</param>
            <param name="document1">Reserved for internal 5.</param>
            <param name="document2">Reserved for internal 6.</param>
            <param name="index1">Reserved for internal 7.</param>
            <param name="index2">Reserved for internal 8.</param>
            <param name="reason">Reserved for internal 9.</param>
            <param name="values">Reserved for internal 10.</param>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.IsScriptLoaded">
            <summary>
            Return true if the script had been initialized and active.
            </summary>
            <returns>True if the script had been initialized.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.FindGlobalResource(System.String)">
            <summary>
            Returns a named global resource value. Script routines may share certain
            global resources across all tasks. Typical example is an external 
            content store connection handle. If a resource with given name is 
            not set then returns null.
            </summary>
            <param name="resourceName">Resource name. Name is case insensitive.</param>
            <returns>Resource with given name.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.SetGlobalResource(System.String,System.Object)">
            <summary>
            Sets or updates a named resource in the global context. The resource is
            kept until application exit time. 
            </summary>
            <param name="resourceName">Resource name. Name is case insensitive.</param>
            <param name="value">Resource value.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is moved in the task tree.
            </summary>
            <remarks>
                <para>New scripts should not use this method as it is global to the entire system. Instead, 
                override <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                which enables per-task logic. However, the method in this class will be called if the per-task method
                is not overriden.</para>
            <para>
            If the node has been repositioned within the same parent, <paramref name="oldParent"/> and 
            <paramref name="newParent"/> are the same. The method is only called for nodes that are 
            explicitly moved; it is not executed for other affected nodes. 
            For example, if the third of three pages in a document is moved 
            to the front of the document, the event is executed only for that page.</para>
            </remarks>
            <param name="node">The node that was moved.</param>
            <param name="newParent">The new parent of the moved node.</param>
            <param name="newIndex">The new position of the node in its parent.</param>
            <param name="oldParent">The previous parent of the moved node, which will be the same as 
            <paramref name="newParent"/> for nodes moved to a different location in the same parent.</param>
            <param name="oldIndex">The old position of the node in its previous parent.</param>
            <param name="reason">The reason the node was moved.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeAdded(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is added to the task tree.
            </summary>
            <remarks>
            <para>
                <para>New scripts should not use this method as it is global to the entire system. Instead, 
                override <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeAdded(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                which enables per-task logic. However, the method in this class will be called if the per-task method
                is not overriden.</para>
            If the node is added at any position other than the last within its parent, 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            is not called for other nodes whose positions 
            have been affected (those moved down in the node list).</para>
            <para>When a node is split, the new node is first created for which
            <c>NodeAdded</c> is called. The new node immediately follows the node which was split in the task tree.
            Each affected child node is then moved to 
            its new parent with 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            called for each.</para>
            </remarks>
            <param name="node">The node that was added.</param>
            <param name="parent">The parent of the new node.</param>
            <param name="reason">The reason the node was added.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is deleted from the task tree.
            </summary>
            <remarks>
                <para>New scripts should not use this method as it is global to the entire system. Instead, 
                override <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                which enables per-task logic. However, the method in this class will be called if the per-task method
                is not overriden.</para>
            <para>
            If the node is deleted from any position other than the last within its parent, 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            is not called for other nodes whose positions have been 
            affected (those moved up in the node list).
            </para>
            <para>When two nodes are merged, each affected child node of the second node is moved to 
            its new parent with a 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            called for each. The old parent 
            node is then deleted for which <c>NodeDeleted</c> is called.</para>
            </remarks>
            <param name="node">The node that was deleted.</param>
            <param name="oldParent">The parent of the deleted node.</param>
            <param name="reason">The reason the node was deleted.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.DocumentTypeChanged(Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext)">
            <summary>
            Called when the user changes the type of a document.
            </summary>
            <remarks>
                <para>New scripts should not use this method as it is global to the entire system. Instead, 
                override <see cref="M:Emc.InputAccel.UimScript.UimScriptTask.DocumentTypeChanged(Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext)"/>
                which enables per-task logic. However, the method in this class will be called if the per-task method
                is not overriden.</para>
            <para>
            The user can use this method to initialize values in the new document
            including copying data from the old document. The old document is
            discarded after the type change is complete, so any modification to 
            its values will be lost.
            </para>
            </remarks>
            <param name="oldDoc">The old document before the type was changed.</param>
            <param name="newDoc">The new, empty document with the changed type.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.BeforeDocumentExtracted(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called before data is extracted from a document.
            </summary>
            <remarks>
                <para>This event is fired once for each document before Extraction processes any of
                the pages in that document. A script author can use it to initialize state used during
                the extraction process, such as scripts executed as part of the freeform rules.</para>
                <para>The dictionary is populated with document-level IA values that are defined on the 
                Extraction step. For each IA value with the naming pattern "PreUimData_&lt;ValueName&gt;",
                <paramref name="values"/> contains an entry called "&lt;ValueName&gt;". 
                For example, if the Extraction step contains the dynamic value "PreUimData_First" with 
                a value of "test" and "PreUimData_Second" with a value of 4, then <paramref name="values"/> 
                will contain two entries: "First" = "test" and "Second" = 4.</para>
                <para>As the dictionary is discarded after the event has completed, any modification 
                to its contents will be lost.</para>
            </remarks>
            <param name="values">Dictionary of document level IA values.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptMainCore.ModuleBatchListView(System.String,System.Collections.Generic.List{Emc.InputAccel.CaptureClient.ITableRow},System.String,System.String[])">
            <summary>
            Called before displaying batches to the user in the Get Work screen. Use this method to filter or 
            reorder the list.
            </summary>
            <remarks>
                <para>Although <see cref="T:Emc.InputAccel.CaptureClient.ITableRow"/> supports lookups by both column index and name, this method 
                should only use column indexes as the names are localized. The returned columns for each batch 
                are:</para>
                <list type="table">
                    <listheader>
                        <term>Index</term>
                        <description>Contents</description>
                    </listheader>
                    <item>
                        <term>0</term>
                        <description>Name</description>
                    </item>
                    <item>
                        <term>1</term>
                        <description>ID</description>
                    </item>
                    <item>
                        <term>2</term>
                        <description>Task count</description>
                    </item>
                    <item>
                        <term>3</term>
                        <description>Create date and time</description>
                    </item>
                    <item>
                        <term>4</term>
                        <description>Priority</description>
                    </item>
                    <item>
                        <term>5</term>
                        <description>Description</description>
                    </item>
                </list>
                <para>The contents of each row must be treated as read-only and must not be changed.</para>
            </remarks>
            <param name="moduleType">The ID of the currently executing module such as "CPDSKTOP" for Completion 
            or "CPIDENTF" for Identification.</param>
            <param name="tableRowList">The table of batches, one per row.</param>
            <param name="loginName">The domain and user name used to login to the Captiva Capture server or 
            "*" for the system user as returned by <see cref="P:System.Environment.UserName" /></param>
            <param name="departments">The current departments for the module.</param>
        </member>
        <member name="T:Emc.InputAccel.UimScript.TraceCallback">
            <summary>
            Trace call  back
            </summary>
            <param name="message">Trace message</param>
            <param name="runtimeValues">Optional runtime values</param>
            <exclude />
        </member>
        <member name="T:Emc.InputAccel.UimScript.UimScriptTask">
            <summary>
            The base class for task-level scripts. (Added in 7.5)
            </summary>
            <remarks>
                <para>The script module must implement a class named <c>ScriptMyClass</c> that extends
                this class where "MyClass" is the value of the design-time string property on the 
                step for which this class will be used. Task scripts must be placed in the
                <c>Custom.InputAccel.UimTaskScript</c> namespace.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.UimScriptTask.StepName">
            <summary>
            Gets the name of the step in the CaptureFlow for which this task is executing.
            </summary>
        </member>
        <member name="P:Emc.InputAccel.UimScript.UimScriptTask.TaskValues">
            <summary>
            Gets the task-level values dictionary for custom, external data handling.
            </summary>
            <remarks>
                <para>In modules that use document-type scripting, this is the same object
                as <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.TaskValues"/>.</para>
            </remarks>
        </member>
        <member name="P:Emc.InputAccel.UimScript.UimScriptTask.StepCustomValue">
            <summary>
            Gets the task-level step value from the first populated of the MDF and setup mode values.
            </summary>
            <remarks>
                <para>In modules that use document-type scripting, this is the same object
                as <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.StepCustomValue"/>.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.Trace(System.String,System.Object[])">
            <summary>
                Writes a message to the module trace log.
            </summary>
            <param name="message">
                The message to write to the trace log.
            </param>
            <param name="runtimeValues">
                An array of zero or more replacement values for the variables in the 
                <paramref name="message" /> parameter.
            </param>
            <remarks>
                <para>This method cannot be used in the constructor for the class. Tracing is only
                available during task events, after the class has been constructed.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.InternalReservedSetTaskState(System.Int64,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},Emc.InputAccel.UimScript.TraceCallback)">
            <summary>
            Set step custom name.
            </summary>
            <param name="accessKey">Internal code</param>
            <param name="stepName">Step name</param>
            <param name="stepCustomValue">Step custom name.</param>
            <param name="taskValues">Task values dictionary</param>
            <param name="funcTrace">Trace delegate</param>
            <exclude />
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.TaskLoad(Emc.InputAccel.UimScript.IUimNodeData)">
            <summary>
            Fired after the task and all of its nodes have loaded.
            </summary>
            <param name="taskNode">The root node for the task.</param>
            <remarks>
                <para>For Identification and Completion, the order of execution is: DocumentLoad 
                for all documents, TaskLoad for the task, and then FormLoad for the indexing form 
                if appropriate. This ensures that the documents are all loaded before the this event
                handler works with them.</para>
                <para>Scripts can use this event for auditing or other once-per-task setup.</para>
            </remarks>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.BeforeTaskFinish(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.CloseReasonCode)">
            <summary>
            Fired after the user requests to finish the task or after the task completes if
            auto-advance is enabled but before the task finishes.
            </summary>
            <remarks>
                <para>The script is responsible for showing a message to the user to indicate why the task 
                will not finish.</para>
                <para>This can be used in Identification to:</para>
                <list type="bullet">
                    <item><description>Verify that the templates in each document are valid.</description></item>
                    <item><description>Verify that the templates in each document are in the correct order.</description></item>
                    <item><description>Verify that the documents in each folder are valid.</description></item>
                    <item><description>Verify that the documents in each folder are in the correct order.</description></item>
                </list>
                <para>This can be used in Extraction or Completion to:</para>
                <list type="bullet">
                    <item><description>Verify that the data in each document is valid.</description></item>
                </list>
                <para>If any document in the task has an error and has 
                <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.TaskFinishOnErrorNotAllowed"/> set to
                <c>true</c>, then this event does not fire as the task has cannot be finished yet.</para>
                <para>If this event returns <see cref="F:Emc.InputAccel.UimScript.TaskFinishAction.Finish"/>, documents will be unloaded
                with no other events. Scripts can use this event for auditing or other once-per-task teardown.</para>
            </remarks>
            <param name="taskNode">The root node for the task.</param>
            <param name="reasonCode">The reason the task is finishing.</param>
            <returns>A value indicating whether the module should complete the task. The value is ignored and
            the module task is saved but not finished if the task is finished because an idle session 
            timeout limit has been reached.</returns>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.FlagsChanged(Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimPageContext,Emc.InputAccel.UimScript.IUimFieldDataContext)">
            <summary>
            Fired when flags are added or removed.
            </summary>
            <remarks>
                <para>This event is only fired when flags are changed by an operator. Settings flags by 
                modifying IA values before the task loads or in a script will not cause this event to be
                fired.</para>
                <para>If a document-type script needs to be run in response to flags changed event, the
                script can be accessed throught the 
                <see cref="P:Emc.InputAccel.UimScript.IUimDataContext.DocumentScript"/>
                property.</para>
            </remarks>
            <param name="document">The document in which flags were changed. This is never null, even if 
            document flags were not changed.</param>
            <param name="pageData">The pre-index data of the page in which flags changed; null if pages flags 
            were not changed. This parameter is only used by the Identification module.</param>
            <param name="page">The page which has flags changed; null if page flags were not changed.</param>
            <param name="field">The field which has flags changed; null if field flags were not changed. 
            This parameter is only used by the Completion module.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.PageIdentified(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IRecognitionProject,Emc.InputAccel.UimScript.IUimTemplate[])">
            <summary>
            Fired after a page template has changed.
            </summary>
            <remarks>
                <para>Scripts can use this event to assign templates to pages based on the current page.</para>
                <para>Each entry in the <c>pageTemplates</c> array contains null if the page has not been classified 
                or the template for the page if the page was classified. 
                To assign a template to a page, retrieve the template from the <c>project</c> and set its value 
                in the <c>pageTemplates</c> array. Page templates can be reused as many times as needed for this.
                To remove the template for a page, such as when the page is known to be misclassified, set its
                value in the array to null.</para>
            </remarks>
            <param name="page">The page which had its template changed.</param>
            <param name="project">The recognition project that can be used to get templates for assignment to other pages.</param>
            <param name="pageTemplates">The array of templates for all pages in the document containing the changed page.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.DocumentIdentified(Emc.InputAccel.UimScript.IUimNodeData,System.String,Emc.InputAccel.UimScript.IRecognitionProject,Emc.InputAccel.UimScript.IUimTemplate[])">
            <summary>
            Fired after a document type has changed in Identification when the step is configured to
            auto-assign templates.
            </summary>
            <remarks>
                <para>Scripts can use this event to assign templates to pages based on the document type.</para>
                <para>The previous classification of pages in this document can be read by calling 
                <see cref="M:Emc.InputAccel.UimScript.IUimNodeData.GetPages"/>
                on the <c>document</c>.</para>
                <para>To assign a template to a page, retrieve the template from the <c>project</c> and set its value 
                in the <c>documentPages</c> array. Page templates can be reused as many times as needed for this.
                To remove the template for a page, such as when the page is known to be misclassified, set its
                value in the array to null. All template changes are applied after the event exits.</para>
            </remarks>
            <param name="document">The document which had been identified.</param>
            <param name="templateCode">The template code used if the document was identified by setting a 
            template code, null if the if the document was identified by setting a document type.</param>
            <param name="project">The recognition project that can be used to get templates for assignment to 
            pages.</param>
            <param name="documentPages">The array of templates for all pages in the document. The input value is 
            the list automatically proposed by the module. See the remarks for details on how to use this array 
            to assign templates.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.BeforeShowTemplates(Emc.InputAccel.UimScript.IUimNodeData,System.Collections.Generic.IList{Emc.InputAccel.UimScript.IUimTemplate})">
            <summary>
            Fired before the list of templates is shown to the operator in Identification.
            </summary>
            <remarks>
                <para>Scripts can use this event to reorder or filter the list of templates that are shown to the 
                operator for the next page.</para>
                <para>When the step is configured to use template code-oriented keying, only the template 
                codes from the <c>nextPageTemplates</c> list are shown to the operator. Each template code
                is shown only once, independent of how many times that code appears in the template list, 
                and the template codes are displayed in the order that each is first found in the list.</para>
            </remarks>
            <param name="page">The page that will be classified using the list of templates passed to this event.</param>
            <param name="nextPageTemplates">The list of templates that will be shown for the next page.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.BeforeShowDocumentList(Emc.InputAccel.UimScript.IUimNodeData,System.Collections.Generic.IList{System.String})">
            <summary>
            Fired before the list of document types is shown to the operator for selecting the type of the next document.
            </summary>
            <remarks>
                <para>Scripts can use this event to reorder or filter the list of document types that are shown 
                      to the operator.</para>
            </remarks>
            <param name="document">The document for which the list of types will be shown.</param>
            <param name="documentTypes">The list of document types that will be sohwn.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.NodeAdded(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is added to the task tree.
            </summary>
            <remarks>
                <para>If this method is not overriden, <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeAdded(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/> will be called instead.</para>
            <para>
            If the node is added at any position other than the last within its parent, 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            is not called for other nodes whose positions 
            have been affected (those moved down in the node list).</para>
            <para>When a node is split, the new node is first created for which
            <c>NodeAdded</c> is called. The new node immediately follows the node which was split in the task tree.
            Each affected child node is then moved to 
            its new parent with 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
            called for each.</para>
            </remarks>
            <param name="node">The node that was added.</param>
            <param name="parent">The parent of the new node.</param>
            <param name="reason">The reason the node was added.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is deleted from the task tree.
            </summary>
            <remarks>
                <para>If this method is not overriden, <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeDeleted(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.GlobalEventReason)"/> will be called instead.</para>
                <para>If the node is deleted from any position other than the last within its parent, 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                is not called for other nodes whose positions have been 
                affected (those moved up in the node list).</para>
                <para>When two nodes are merged, each affected child node of the second node is moved to 
                its new parent with a 
            <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/>
                called for each. The old parent 
                node is then deleted for which <c>NodeDeleted</c> is called.</para>
            </remarks>
            <param name="node">The node that was deleted.</param>
            <param name="parent">The parent of the deleted node.</param>
            <param name="reason">The reason the node was deleted.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)">
            <summary>
            Called when a node is moved in the task tree.
            </summary>
            <remarks>
                <para>If this method is not overriden, <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.NodeMoved(Emc.InputAccel.UimScript.IUimNodeData,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.IUimNodeData,System.Int32,Emc.InputAccel.UimScript.GlobalEventReason)"/> will be called instead.</para>
            <para>
            If the node has been repositioned within the same parent, <paramref name="oldParent"/> and 
            <paramref name="newParent"/> are the same. The method is only called for nodes that are 
            explicitly moved; it is not executed for other affected nodes. 
            For example, if the third of three pages in a document is moved 
            to the front of the document, the event is executed only for that page.</para>
            </remarks>
            <param name="node">The node that was moved.</param>
            <param name="newParent">The new parent of the moved node.</param>
            <param name="newIndex">The new position of the node in its parent.</param>
            <param name="oldParent">The previous parent of the moved node, which will be the same as 
            <paramref name="newParent"/> for nodes moved to a different location in the same parent.</param>
            <param name="oldIndex">The old position of the node in its previous parent.</param>
            <param name="reason">The reason the node was moved.</param>
        </member>
        <member name="M:Emc.InputAccel.UimScript.UimScriptTask.DocumentTypeChanged(Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext)">
            <summary>
            Called when the user changes the type of a document.
            </summary>
            <remarks>
                <para>If this method is not overriden, <see cref="M:Emc.InputAccel.UimScript.UimScriptMainCore.DocumentTypeChanged(Emc.InputAccel.UimScript.IUimDataContext,Emc.InputAccel.UimScript.IUimDataContext)"/> will be called instead.</para>
            <para>
            The user can use this method to initialize values in the new document
            including copying data from the old document. The old document is
            discarded after the type change is complete, so any modification to 
            its values will be lost.
            </para>
            </remarks>
            <param name="oldDoc">The old document before the type was changed.</param>
            <param name="newDoc">The new, empty document with the changed type.</param>
        </member>
    </members>
</doc>
